一 split分离解析(视图解析)
1.当收到客户机的DNS查询请求的时候
--能够区分客户机的来源地址
--为不同类别的客户机提供不同的解析结果（ip地址）
--不同的客户端解析同一个域名时，解析结果不同
--为客户端提供最近的资源

2.环境及需求
– 权威DNS:svr7.tedu.cn 192.168.4.7
– 负责区域:tedu.cn
– A记录分离解析 —— 以 www.tedu.cn 为例

   客户机来自解析结果
           192.168.4.207  ------->   192.168.4.100
           其他地址            ------->   1.2.3.4

3.分离解析配置
1）注意事项
--所有的客户端都要必须找到自己的分类，否则DNS直接报错
--类别的view匹配，由上即下，匹配即停止
--所有的zone都必须在view中

例子
	view "nsd" {                         #视图名称可以自己取，不能取中文
	  match-clients{ 192.168.4.207; };   #配置客户端来源地址，可以配置多个
	  zone "tedu.cn" IN{
	    type master;
	    file "tedu.cn.zone";
	  };
	};
	view "other" {
	  match-clients{ any; };
	  zone "tedu.cn" IN{
	    type master;
	    file "tedu.cn.other";
	  };
	};

2)acl地址列表
--为大批量的客户机地址建立列表
-- 若地址比较少,也可以不建立列表
如：
	acl test{ 192.168.4.207;192.168.110.1/24; };
	view "nsd" {                         #视图名称可以自己取，不能取中文
	  match-clients{ test; };   #配置客户端来源地址，可以配置多个
	  zone "tedu.cn" IN{
	    type master;
	    file "tedu.cn.zone";
	  };
	};
	view "other" {
	  match-clients{ any; };
	  zone "tedu.cn" IN{
	    type master;
	    file "tedu.cn.other";
	  };
	};

3）多区域split分离解析
--注意事项：每一个view中，zone的个数都必须一样
	acl test{ 192.168.4.207;192.168.110.1/24; };
	view "nsd" {
	  match-clients{  test; };
	  zone "tedu.cn" IN{
	    type master;
	    file "tedu.cn.zone";
	  };
	  zone "baidu.com" IN{
	    type master;
	    file "baidu.com.zone";
	  };
	  zone "qq.com" IN{
	    type master;
	    file "qq.com.zone";
	  };
	};
	view "other" {
	  match-clients{ any; };
	  zone "tedu.cn" IN{
	    type master;
	    file "tedu.cn.other";
	  };
	  zone "baidu.com" IN{
	    type master;
	    file "baidu.com.zone";
	  };
	  zone "qq.com" IN{
	    type master;
	    file "qq.com.zone";
	  };
	};


二 RAID磁盘阵列
热备：不需要人操作
冷备：需要人操作
• 廉价冗余磁盘阵列
-- Redundant Arrays of Inexpensive Disks
 通过硬件/软件技术,将多个较小/低速的磁盘整合成一个大磁盘

-- 阵列的价值:提升I/O效率、硬件级别的数据冗余
-- 不同RAID级别的功能、特性各不相同

1.RAID0,条带模式
--同一个文档分散存放在不同磁盘
--并行写入以提高效率，无容错功能
--至少需要两块磁盘组成
--存储利用率100%

2.RAID1,镜像模式
--一个文档复制多份，分别写入不同磁盘
--多份拷贝提高可靠性，效率无提升
--至少需要两块磁盘组成
--存储利用率小于或等与50%

3.RAID5，高性价比模式
--相当于RAID0和RAID1的折中方案
--至少需要一块磁盘的容量来存放校验数据
--至少需要三块磁盘组成
--存储利用率是(n-1)/n

4.RAID6,高性价比/可靠模式
--相当于扩展的RAID5磁盘阵列，提供2份独立检验方案
--需要至少两块磁盘的容量来存放校验数据
--至少需要4块磁盘组成
--存储利用率是(n-2/n)

三 进程
1.简介
1）程序：静态的代码，仅仅占用的磁盘空间

2）进程：正在运行的代码，会占用cpu与内存
--父进程与子进程，后台整个进程，进程数
--进程唯一标识编号：PID

2.查看进程（快照）
systemd:Linux运行的第一个进程，由内核直接运行，是所有进程的父进程。
--pstree
命令：pstree                      #查看整个进程数(root)
命令：pstree [选项] [用户名]       #查看指定用户名的进程数
选项
	-u：指定用户名(可省略)
	-p：列出对应PID编号
	-a：显示完整的命令行
例子
[root@svr7 named]# pstree -ap
systemd,1 --switched-root --system --deserialize 21
  ├─ModemManager,676
  │   ├─{ModemManager},688
  │   └─{ModemManager},721
  ├─NetworkManager,673 --no-daemon


--ps
命令：ps aux 操作（进程的详细信息）   
用途：详细列出正在运行的所有进程
[root@svr7 named]# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.6 129416  6864 ?        Ss   08:19   0:04 /usr/lib/system
root         2  0.0  0.0      0     0 ?        S    08:19   0:00 [kthreadd]


命令：ps -elf 操作（进程的父进程的信息PPID）
用途：列出正在运行的所有进程
[root@svr7 named]# ps -elf
F S UID        PID  PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD
4 S root         1     0  0  80   0 - 32354 ep_pol 08:19 ?        00:00:04 /usr/
1 S root         2     0  0  80   0 -     0 kthrea 08:19 ?        00:00:00 [kthr


3.进程动态排名
--top
格式：top [-d 刷新妙数] [-u 用户名]

P：进程CPU排序
M：进程内存排序
q：退出
[root@svr7 named]# top -d 1
top - 14:48:12 up  6:29,  1 user,  load average: 0.00, 0.01, 0.05
Tasks: 108 total,   1 running, 107 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.1 us,  0.0 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem :  1016260 total,   596128 free,   166508 used,   253624 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.   654916 avail Mem 

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND      
 6220 root      20   0       0      0      0 S  0.1  0.0   0:00.01 kworker/0:0  
 6230 root      20   0  157696   2168   1524 R  0.1  0.2   0:00.02 top          
    1 root      20   0  129416   6864   2720 S  0.0  0.7   0:04.20 systemd      
    2 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kthreadd  

4.查看进程的指令
--pgrep
格式：pgrep [选项]..  查询条件
选项
-l：输出进程名，而不仅仅是PID
-U：检索指定终端的进程
-t：检索指定终端的进程
-x：精确匹配完整的进程名
例子
[root@svr7 named]# pgrep -lu lisi -t pts/1
6562 bash
6601 top

[root@svr7 named]# pgrep -x named
4090

--who
用途：查看当前所有用户登陆系统的信息
[root@svr7 named]# who
root     tty1         2018-09-25 15:18
root     pts/0        2018-09-25 08:25 (192.168.4.254)
root     pts/1        2018-09-25 15:16 (192.168.4.254)
tty：源服务器命令行或者图形界面
pts：终端图形命令行


5.进程的前台后台调度
--将进程放入后台启动
在命令行末尾添加‘&’符号，不占用当前终端
Ctrl + z ：将正在运行的程序暂停并放入后台

--jobs
用途：查看后台任务列表
格式：jobs [-l]

--fg
用途：将后台任务恢复到前台运行
格式：fg 编号
提示：编号在jobs名查看
--bg
用途：激活后台被挂起的任务
格式：bg 编号
提示：编号在jobs名查看

--sleep
用途
格式：sleep [时间]    #时间单位是秒     
例子
[root@svr7 named]# sleep 100
[1]+  已停止               sleep 100
[root@svr7 named]# jobs
[1]+  已停止               sleep 100
[root@svr7 named]# bg 1
[1]+ sleep 100 &
[root@svr7 named]# jobs
[1]+  运行中               sleep 100 &
[root@svr7 named]# fg 1
sleep 100

6.杀死进程
--kill [-9] PID....
--killall [-9] 进程名...
--pkill 查找条件      #不介意使用
[-9]：强制杀死

例子：
[root@svr7 named]# sleep 4000 &
[1] 7003
[root@svr7 named]# jobs -l
[1]+  7003 运行中               sleep 4000 &
[root@svr7 named]# kill 7003
[root@svr7 named]# jobs -l
[1]+  7003 已终止               sleep 4000
[root@svr7 named]# jobs -l
[root@svr7 named]# sleep 5000 &
[1] 7004
[root@svr7 named]# sleep 500 &
[2] 7005
[root@svr7 named]# jobs -l 
[1]-  7004 运行中               sleep 5000 &
[2]+  7005 运行中               sleep 500 &
[root@svr7 named]# killall sleep
[1]-  已终止               sleep 5000
[2]+  已终止               sleep 500

查看进程的命令：
     pstree： 结构鲜明，可以查看整个进程树 
     ps aux： 查看正在运行的所有进程，信息非常全面
     ps -elf 查看正在运行的所有进程，信息中有父进程的信息
     top：动态，可以进行排名
     pgrep：选项众多，用于检索进行信息，方便脚步中变量赋值


四 日志管理
1.常见的日志文件
/var/log/messages      #记录内核消息、各种服务的公共消息

/var/log/dmesg         #记录系统启动过程的各种消息

/var/log/cron          #记录与cron计划任务相关的消息

/var/log/maillog       #记录邮件收发相关的消息

/var/log/secure        #记录与访问限制相关的安全消息

2.用户日志



3.日志分析
1)分析工具
--通用分析工具
	--tailf
	实时跟踪日志
	 
	--过滤工具
	--awk

	--sed

--专用分析工具
	--Webmin系统管理套件

	--Webalizer、AWStats等日志统计套件

2）用户登陆分析
--users who w命令
users：查看已登陆的用户名
who：查看已登陆的用户信息（常用）
w：查看已登陆的用户信息（最详细，不常用）
例子
[root@svr7 named]# users
root
[root@svr7 named]# who
root     pts/0        2018-09-25 08:25 (192.168.4.254)
[root@svr7 named]# w
 16:52:24 up  8:33,  1 user,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
root     pts/0    192.168.4.254    08:25    0.00s  0.71s  0.04s w

--last lastb
用途：查看最近登陆成功/失败的用户信息
例子
[root@svr7 named]# last
root     tty1                          Tue Sep 25 15:18 - 15:19  (00:00)    
root     pts/1        192.168.4.254    Tue Sep 25 15:16 - 16:38  (01:22)    
root     pts/1        192.168.4.254    Tue Sep 25 14:20 - 14:47  (00:26)  

[root@svr7 named]# lastb
(unknown tty1                          Thu Sep 20 09:24 - 09:24  (00:00)    
root     tty1                          Thu Sep 20 09:23 - 09:23  (00:00)    
(unknown ttyS0                         Tue Jan 30 12:35 - 12:35  (00:00) 

3)日志消息的优先级
• Linux内核定义的事件紧急程度
– 分为 0~7 共8种优先级别
– 其数值越小,表示对应事件越紧急/重要

  0  EMERG（紧急）        会导致主机系统不可用的情况
  1  ALERT（警告）         必须马上采取措施解决的问题
  2  CRIT（严重）	        比较严重的情况
  3  ERR（错误）	       运行出现错误
  4  WARNING（提醒）    可能会影响系统功能的事件
  5  NOTICE（注意）      不会影响系统但值得注意
  6  INFO（信息）	      一般信息
  7  DEBUG（调试）      程序或系统调试信息等

4）journalctl工具（rhel7才有）
提取由systemd-journal服务搜集的日志，主要包括内核/系统日志、服务日志
--常见的用法
journalctl | grep 关键词
journalctl -u 服务名 [-p 优先级]


systemctl控制

• Linux系统和服务管理器
– 是内核引导之后加载的第一个初始化进程(PID=1)
– 负责掌控整个Linux的运行/服务资源组合

对于服务的管理
 systemctl restart  服务名   #重起服务
 systemctl start  服务名       #开启服务
 systemctl stop  服务名         #停止服务
 systemctl status  服务名     #查看服务当前的状态
 
 systemctl enable  服务名      #设置服务开机自启动
 systemctl disable  服务名    #设置服务不开机自启动
 systemctl enable  服务名 

#查看是否开机自启动
[root@svr7 /]# systemctl is-enabled httpd  
disabled  #禁止开机启动
[root@svr7 /]# systemctl enable httpd

[root@svr7 /]# systemctl is-enabled httpd
enabled  #允许开机启动
[root@svr7 /]#



五 systemd
• 一个更高效的系统&服务管理器
– 开机服务并行启动,各系统服务间的精确依赖

– 服务目录:/lib/systemd/system/

[root@svr7 /]# vim /lib/systemd/system/httpd.service



RHEL6:运行级别  200

        0：关机  
        1：单用户模式（基本功能的实现，破解Linux密码） 
	2：多用户字符界面（不支持网络）
	3：多用户字符界面（支持网络）服务器默认的运行级别 
	4：未定义
	5：图形界面  
	6：重起
   
    切换运行级别：init  数字

    
RHEL7：运行模式

   字符模式：multi-user.target
   图形模式：graphical.target

当前直接切换到图形模式
[root@svr7 /]# systemctl isolate graphical.target
当前直接切换到字符模式
[root@svr7 /]# systemctl isolate multi-user.target

查看每次开机默认进入模式
# systemctl get-default
 multi-user.target

设置永久策略，每次开机自动进入graphical.target
# systemctl set-default graphical.target 
# reboot 








































































