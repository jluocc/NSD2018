一 shell脚本
脚本：一个可运行的文件，可以实现某种功能
1.组成
#！环境声明(这个程序由哪一个解释器解释，默认/bin/bash)
#注释文本
可执行代码
例子：
#！/bin/bash
#我的第一个程序
echo this is my first shell

2.技巧
1）| 管道

2)重定向
>:只收集前面命令的正确输出信息写入文本文件中(覆盖源文本文件内容)
2>:只收集前面命令的错误输出信息写入文本文件中(覆盖源文本文件内容)
&>:只收集前面命令的正确和错误输出信息都写入文本文件中(覆盖源文本文件内容)
>>:

3.黑洞设备
位置:/dev/null

4.语法
read:产生交互,记录用户在键盘上的输入,将记录的信息赋值给变量
-p:提示信息
read -p '提示信息' 变量

5.变量
1)定义变量
变量名=变量值
注意:
--等号两边不能由空格
--只能由字母,数字,下划线组成,区分大小写
--只能由字母,下划线开头
--变量名不能是关键字
2)引用变量
$变量名
${变量名}

$()或反撇号~ ~:将命令的输出,作为另一个命令的参数,参与下一个命令的运行
如:mkdir data-$(date +%F)

3)变量类型
--环境变量:变量名一般大写,由系统定义完成,用户直接使用
如:
USER=永远存储当前系统用户名
--位置变量:由系统定义完成,用户直接使用(非交互式)
在执行脚本时,提供命令行参数
表示$n,n为序号
如:
$1,$2,$3........,${44}.....
--预定义变量:由系统定义完成,用户直接使用
用来保存脚本程序的执行信息
直接使用这些变量
不能直接为这些变量赋值
如:
$# 已加载的位置变量的个数(计算用户输入位置变量个数)
$* 所有位置变量的值
$? 程序退出后的状态值,0标识正常,非0即异常
--自定义变量:用户自主设置,修改,使用

6.条件测试及选择
单引号 '' :取消所有特殊字符的含义
双引号 "":

1)测试选项
注意:[  ] 两边都要由空格,每个参数都至少有一个空格
--检查文档状态
-e:文档存在为真
[ -e /etc ]   
-d:文档存在,并且为目录才为真
[ -d /etc ] 
-f:文档存在,并且为文件才为真
-r:文档存在,并且具备读取权限才为真
-w:文档存在,并且具写权限才为真
-x:文档存在,并且具备执行权限才为真
--比较整数大小
-gt:大于
-ge:大于等于
-eq:等于
-ne:不等于
-lt:小于
-le:小于等于
--字符串比对
==:两个字符串相等为真
!=:两个字符串不相等为真

7.条件处理
1)if双分支
	if [条件测试];then
	  命令序列xx
	else
	  命令序列yy
	fi

2)if多分支
	if [条件测试1];then
	  命令序列xx
	elif [条件测试2];then
	  命令序列zz
	elif [条件测试3];then
	  命令序列ff
	else
	  命令序列yy
	fi

8.循环
1)for
	for 变量名 in 值列表
	do
	  命令序列
	done

造数:{起始数值..结束数值}



































