函数式编程
	建议使用可重入函数
		可重入函数一定不使用除局部变量以外的变量
sorted函数的key对应的函数必须只有一个形参
递归：函数直接或间接调用自身
递归可能出现崩溃的问题，能用循环解决就用循环，递归了解思想
闭包是解释型语言特有的特征（闭包所占的资源不会释放）

装饰器 decorator（专业提高篇）
作用：
	通常在不改变原函数的情况下，改变或添加原函数功能
什么是装饰器：
	装饰器是一个函数，能常用来包装另一个函数或类

函数装饰器：（也是闭包）
	是指装饰器函数，传入的是函数，返回的也是函数
语法：
	def 装饰器函数名（形参）：###装饰函数（通常只用一个函数，用来绑定被装饰函数）
		语句块
		return 函数对象
    @装饰器函数名                 ######被装饰函数
    def 函数名（形参列表）：
        语句块

def mydeco(fn):
    def fx():
        print('这是fn被调用之前')
        fn()
        print('这是fn被调用之后')
    return fx
@mydeco
def myfunc():
    print('myfunc被调用')
myfunc()
相当于
def mydeco(fn):
    def fx():
        print('这是fn被调用之前')
        fn()
        print('这是fn被调用之后')
    return fx
def myfunc():
    print('myfunc被调用')
myfunc=mydeco(myfunc)
myfunc()
#########################
print('这是fn被调用之前')
fn()
print('这是fn被调用之后')
#############################这部分相当于被打包
fx函数后面是通过myfunc调用的（调试，return部分绑定）
def privileged_check(fn):
    def fx(n,x):
        print('正在验证')
        fn(n,x)
    return fx
def message_send(fn):
    def fy(n,x):
        fn(n,x)
        print('正在发送消息给',n,'...')
    return fy
def save_money(name,x):
    print(name,'存钱',x,'元')

@message_send
@privileged_check
def withdraw(name,x):
    print(name,'取钱',x,'元')
# save_money('小王',240)
# save_money('小赵',400)
withdraw('小李',500)
##############################################################
函数的文档字符串：（给使用函数的人一些说明，可用help查看）
	函数内第一次未赋值给任何变量的字符串是函数的文字字符串
	语法；

	def 函数名（参数列表）：
		'函数的文档字符串'
		函数语句块

	如：
def cha():
    '''这是一块文档字符串
    以下神谷额...'''
    pass
help(cha)
######################################
Help on function cha in module __main__:

cha()
    这是一块文档字符串
    以下神谷额...
(END)

函数的__doc__属性
__doc__属性用于记录函数的文档字符串
如：
print(cha.__doc__)
（属性：一个变量的对象）

函数定义(def语句)语法的完整语法
[@装饰器名1]     （可以多个，必须换行）
[@装饰器名2]
[... ...]
def 函数名([位置形参],[*元组形参],[命名关键字形参],[**字典形参]):
	"文档字符串"
	语句块
面试题：
l=[1,2]
def f(n,lst=[]):
	lst.append(n)   （lst绑定的列表[]，会在创建def的时候创建，且和f绑定的函数一同存在）
	print(lst)
f(3,l)
f(4,l)
f(100)
f(200)
f(200)
####################################
[1, 2, 3]
[1, 2, 3, 4]
[100]
[100, 200]
[100, 200, 200]
############################
l=[1,2]
def f(n,lst=[]):
	lst.append(n)   
	print(lst)
f(3,l)
f(100)
f(200)
f(4,l)
f(200)
#######################
[1, 2, 3]
[100]
[100, 200]
[1, 2, 3, 4]
[100, 200, 200]
###############################
l=[1,2]
def f(n, lst=None):           None和NULL是两个概念，注意会用，尤其是在判断的时候
    if lst is None:
        lst = []
    lst.append(n)
    print(lst)
f(3,l)
f(4,l)
f(100)
f(200)
f(200)

[1, 2, 3]
[1, 2, 3, 4]
[100]
[200]
[200]
###################################


模块   module
什么是模块：
	模块是一个包含有一系列数据，函数，类等组成的程序组
	模块是一个文件，模块文件名通常以.py结尾
作用：
	让一些相关的数据，函数，类等有了哦机的组织在一起
	是逻辑结构更加清晰
	模块中的数据，函数和类等可提供给其他模块或程序使用
模块的分类；
	1.内置模块，在解析器内部可以直接使用（通常使用c语言编写）
	2.标准库模块，安装python时已安装，且可以直接使用
	3.第三方模块（通常为开源，需要自己安装）
	$  pip3 install xxxx
	4.用户自己编写的模块（也可以作为其他人的第三方模块）

模块的导入语句：
import 语句  （优先使用）
语法：
	import 模块名1 [as 模块新名1],模块名2
	[as 模块新名2]....
作用：
	将某模块整体导入到当前模块中
用法：
	模块名.属性名
首先要导入模块
dir(obj)函数，返回模块内所有属性的字符串列表
help（模块名）  可以查看模块相关的文档字符串

from import 语句 （其次）
语法：
	from 模块名 import 模块属性名1 [as 属性新名],模块属性名2 [as 属性新名2]
作用：
	将某个模块的一个或多个属性导入到当前模块的作用域
如;
	from math import sin
	from math inport pi,e,cos
	from math import factorial as fac
	print(sin(pi/2)*fac(5))

	不再需要math.属性了，直接属性

	factorial（阶乘函数）

from import * 语句  (缺点，不能重命名，而且会有命名冲突，把之前定义的变量覆盖掉)
语法：
	from 模块名 import *
作用：
	将某模块的所有属性导入到当前模块
	from math inport *
pi='港币'
print(pi)
from math import *
print(pi)

港币
3.141592653589793
#################冲突问题

dir 函数：
	dir([对象])  返回一个字符串列表
	作用；
		1.如果没有参数，则返回当前作用域内所有变量的列表
		2.如果给定一个对象作为参数，则返回这个对象的所有变量的列表
			a.对于一个模块，返回这个模块的全部变量
			b.对于一个类，返回类的所有类变量，并递归基类的所有变量
			c.对于其他对象返回所有变量，类变量和基类变量

import math
from math import sin
from math import *
再用dir（）查看

数学模块 math
	模块名：math
	import math
	from math import sin
	from math import *

	弧度  (pi表示，为180度）

from math import factorial as fa
print(sum(map(lambda x:fa(x),range(1,21))))
################################################
>>> l=[45,5,2,6]
>>> a=l[::-1]
>>> id(l)
1634433071560
>>> id(a)
1634432485512
>>> l[3]=4
>>> id(l)
1634433071560
#################切片的逆序的id是变化的
时间模块：
	模块名：time
	夏令时修正时间 (-1, 0 or 1).（中国在东8区，夏令时永远为0）

time.gmtime([secs])	用给定秒数转换为用UTC表达的时间元组
(缺省返回当前时间元组)  （1970前用负数表示）
time.mktime(tuple)	将本地日期时间元组转换为新纪元秒数时间(UTC为准)
（必须凑齐9个参数）###（）里也是（）元组
time.localtime(birth)
time.struct_time(tm_year=1995, tm_mon=3, tm_mday=15, tm_hour=0,
 tm_min=0, tm_sec=0, tm_wday=2, tm_yday=74, tm_isdst=0)
>>> (time.time()-time.mktime((1995,3,15,0,0,0,0,0,0)))//(3600*24)
8588.0

系统模块：sys
	运行时系统相关的信息
	模块名：sys


>>> sys.platform
'win32'（windows下）
>>> sys.platform
'linux'
(unix下是达尔文）