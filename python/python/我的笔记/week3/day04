全局变量将成为模块的属性

搜索顺序：（可以试验一下）
	1.内建模块
	2.当前工作路径
	3.sys.path提供的路径

（降低耦合度，多用可重入函数，少用全局变量）
import 语句不能使用相对导入，还有dir详细属性
from import 语句 可以
from import 语句 也可以

异常（基础）exception
什么是错误
	错误是指由于逻辑或语法等导致一个程序无法正常秩序的问题
什么是异常
	异常是程序出错时标识的一种状态
	当异常发生时，程序不会再向下执行，而转去调用此函数的地方待
	处理此错误并恢复为正常状态
作用：
	用作信号，通知上层调用者错误产生需要处理

try语句：
	两种语法：
	try-except 语句
	try-finally 语句
try-except语句（保证只有一个except执行，但并不是其他语句不执行，后面的非except会执行）
	语法：
	try :
		可能触发异常的语句
	except 错误类型1 [as 变量名1]：
		异常处理语句1
	except 错误类型2 [as 变量名2]：
		异常处理语句2
	except (错误类型3,错误类型4） [as 变量名3]：######（）是元组
		异常处理语句3
	except:   （只有一种错误，并且也不需要判断错误类型，最好用这种，类型不给，匹配所有类型）
		异常处理语句other
	else:
		未发生异常语句（之前要有except，没有异常执行这一句）
	finally:
		最终语句
	说明（as 变量名，可以将错误的类型对应的错误绑定，并可以用print显示出来）
	（except只能执行一个，都没有满足的执行else，finally都会被执行）

	作用:尝试捕获异常通知，将程序有异常流程转为正常流程并继续执行
	说明；
		except 子句可以有一个或多个，但至少要有一个
	######################################
	s=input('请输入人数')
    count=int(s)
    ##############输入小数不能一下转化两种类型
    一旦错误，就往上一级返，也就是调用的地方（如函数）
############################################################	
'%d'  % 2.5   结果2
>>> '%f' % 2.55  ####（宽度也必须保证原数的完整性，不是很准）
'2.550000'
round(1234.596,-1)
##########################################################
def div_apple(n):
    print('有%d个苹果，你想分给几个人？' % n)
    s=input('请输入人数')
    count=int(s)
    result=n/count
    print(result)
    print('每个人分了%d个苹果' % result)
try:
    div_apple(10)
except :
    print('有错误发生')
else:
    print('没有错误发生')
finally:
    print('finally执行')
print('程序正常结束')
####################@@@@@@@@@@@@@@@@@@@@
有10个苹果，你想分给几个人？
请输入人数0
有错误发生
finally执行
程序正常结束
##########################################
。。。
try:
    div_apple(10)
    print('分苹果结束')
except ValueError:
    print('有错误发生')
else:
    print('没有错误发生')
finally:
    print('finally执行')
print('程序正常结束')
##################################################
有10个苹果，你想分给几个人？
请输入人数0
finally执行
Traceback (most recent call last):
  File "/home/tarena/test/demo/demo05.py", line 9, in <module>
    div_apple(10)
  File "/home/tarena/test/demo/demo05.py", line 5, in div_apple
    result=n/count
ZeroDivisionError: division by zero
#############################错误会层层向上抛
######################################
def get_score():
    x=int(input('请输入0到１００的数:'))
    try:
        if 0<=x<=100:
            return x
    except:
        return 0
    finally:
        print('程序结束')

print('成绩为：',get_score())
#######################################
请输入0到１００的数:-30
程序结束
成绩为： None########理解except:return 0并没有执行
##########################

except ValueError:
    return 0
return s
############这种有且执行一句的return 和if else等价，但是不能将这里的return换成其他，不然不等价
return不能终止finally的执行

try-finally 语句
语法：
	try：
		可能触发异常的语句
	finally:
		最终语句
	说明：
		finally 子句不可以省略
		一定不再except子句
	作用：
		通常用try-finally语句来做触发异常时必须要出来的事情，无论异常是否发生，finally子句都会被执行
		try-finally语句不会改变程序的（正常/异常）状态

熟练运用continue,break,pass前两个用在循环中，后一个填充语法，什么也不做

raise语句  （还有一种思路，就是真的制造一种错误，比如int('aaaaa')）
作用；
	触发一个错误，让程序进入异常状态
	发送错误通知给调用者（以后的语句都不再执行，除非有捕获异常的语句）
语法：
	raise：异常类型
	或
	raise 异常对象
	或
	raise 重新触发上一次异常

def make_except():
    print('函数凯撒')
    raise ZeroDivisionError
    print('函数结束')
try:
    make_except()
except:                 ################若有，raise后面的不会执行
    print('错误通知')
print('程序正常结束')
（三语句，def,try-except,print）
##############################################
def make_except():
    print('函数凯撒')
    a=ZeroDivisionError('值错误')
    raise  a
    print('函数结束')
try:
    make_except()
except ZeroDivisionError as ze:
    print(ze)
    print('错误通知')
print('程序正常结束')
#####################################
函数凯撒
值错误
错误通知
程序正常结束
#################################################重新触发上一次异常
def fa():
    print('----fa---开始')
    raise ValueError('故意制造一个错误')
    print('函数fa结束')
def fb():
    print('fb开始')
    try:
        fa()
    except ValueError as va:
        print('fa里发送了值错误已处理')
        raise va
    print('fb结束')
try:
    fb()
except ValueError:
    print('在一次收到fb内部发生的错误')
############################################
fb开始
----fa---开始
fa里发送了值错误已处理
在一次收到fb内部发生的错误
#######################################试着删除一些try-except，看看结果
try-except里可以嵌套异常，从里向外执行

assert 语句（断言语句）
语法：
	assert 真值表达式，错误数据（通常是字符串）
作用：
	当真值表达式为False时，用错误数据创建一个AssertionError类型的错误，并进入
	异常状态

	等同于：
		if bool（真值表达式）==False:
		    raise AssertionError(错误数据)
#########################################
def get_score():
    s=int(input('请输入学生成绩:(0-100)'))
    assert 0<=s<=100,'成绩超出范围'
    # if bool(0<=s<=100==False):
    #     raise AssertionError('成绩超出范围')
    return s
try:
    score=get_score()
    print('学生的成绩为：',score)
except AssertionError as err:
    print('AssertionError类型的错误被触发，且已捕获')
    print('err=',err)
######################################################

小结；
异常处理相关的语句：
	try-except 语句：
		作用；捕获异常通知，将程序由异常状态转为正常状态
	try-finally 语句：
		作用：执行必须要执行的语句
	raise 语句
		作用：触发异常（抛出异常），让程序进入异常流程
	assert 语句：
		作用 根据条件来触发（AssertionError）类的异常并进入异常流程

迭代器（Iterator）
	什么是迭代器
		迭代器是访问可迭代对象的工具
		迭代器是指用哪个iter(obj)函数返回的对象（实例）
		迭代器可以用next(it) 函数获取可迭代对象的数据
迭代器函数：
iter(iterable)从可迭代对象中返回一个迭代器，iterable必须是能
提供一个迭代器的对象
next(iterator)从迭代器iterator中获取下一个记录，如果无法获取下一条记录，
则触发StopIterator异常通知

说明：
	迭代器只能往前取值，不会后退
l=[1,3,5,7]
#a=range(1,10,3)
it=iter(l)
print(next(it))
print(next(it))
print(next(it))
print(next(it))
try:
    print(next(it))
except StopIteration as st:
    print(st)
#####################
1
3
5
7
空格（没有内容）
##################################

用迭代器和while 来代替for语句循环
l=range(1,10,2)
it=iter(l)
while True:
    try:
        x=next(it)
        print(x)
    except StopIteration:  ###（有异常就跳出）
        break

print('---------------')
for i in l:
    print(i)
############所有的for都可以用while+迭代器+异常来实现
