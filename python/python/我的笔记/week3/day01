函数式编程
函数式编程是指用一系列函数解决问题
说明：
用每一个函数完成细小的功能，一系列函数的任意组成可以解决大问题
函数仅接受输入并产生输出，不包含任何可能影响输出的内部状态
return sum(range(1,n+1))
思考：sum可用于哪些
函数的可重入性：（同样的变量结果相同）也就是进来不要使用全局变量
    当一个函数没有访问除局部变量意外的变量，则此函数为可重入函数
    入
不可重入性（同样的变量结果不同）
a=0
def qiuhe(x,y):
    global a
    a+=x+y
    return a
print(qiuhe(10,20))
print(qiuhe(10,20))
30
60

   return a+=x+y是错的，return后的表达式不能是赋值语句
   return a+x+y    结果都是30（因为并没有对a进行赋值）

高阶函数（High Order Function）
什么是高阶函数
满足下列条件中一个的函数即为高级函数
	函数接受一个或多个函数作为参数传入
	函数返回一个函数

python内建的高阶函数
map,filter,sorted
map函数：
map(func,*iterables)用函数对可迭代对象进行的每个元素用func
处理后返回可迭代对象iterables中的每个元素作为参数计算后得到结果，
在返回，当最短的一个可迭代对象不再提供数据时迭代结束
def power(x):
	print('power被调用x=',x)
    return x**2
for x in map(power,range(1,10)):
    print(x)

（power是被map调用的，被调用9次）

for x in map(pow,range(1,5),
                range(4,0,-1)):
    print(x)

for x in map(pow,[1,2,3,4],
                range(4,0,-1),
                range(5,100)):
    print(x)
（结果以最少的来算）

print(sum(map(lambda x:x**2,range(1,10))))

def isodd(x):
    return x%2==1（说明：return后跟判断语句，返回真假）

filter函数
filter(func,iterable)返回一个可迭代对象，此可迭代对象将对
iterable获取到的数据用函数func进行筛选，func将对iterable中
的每个元素进行求值，返回False则丢弃，返回True则保留此数据

# for i in filter(isodd,range(1,10)):
#     print(i)
# print(filter(isodd,range(1,10)))
# even=[x for x in filter((lambda x:x%2==0),range(1,10))]
# print(even)

def issprime(x):
    if x<2:
        return False
    else:
        for i in range(2,x-1):
            if x%i==0:
                return False
        return True
primes=[x for x in filter(issprime,range(10))]       
print(primes)

[2, 3, 5, 7]
（这里不能用print，打印就换行了，True的值为真的x，循环也可以用return终止掉）


sorter函数：
作用：将原可迭代对象的数据进行排序，生成排序后的列表
格式：
	sorted(iterable,key=None,reverse=False)
说明：
iterable是可迭代对象
key函数是用来提供比较值的函数，这个值将作用排序的依据
reverse 标志用来设置是否降序排序
l=[45,3,78,-23,23]
l2=sorted(l)
print(l2)
l3=sorted(l,reverse=True)
print(l3)
l4=sorted(l,key=abs)
print(l4)

l=['sd','ewr','d','ersf','df']
l5=sorted(l)
print(l5)
l4=sorted(l,key=len)
print(l4)

将字符串列表反序打出，用切片
###############################################
def func(s):
    r=s[::-1]
    print(s,r)
l=['sd','ewr','d','ersf','df']
func(l)
['sd', 'ewr', 'd', 'ersf', 'df'] ['df', 'ersf', 'd', 'ewr', 'sd']
##############################################整体传入
def func(s):
    r=s[::-1]
    print('字符串',s,'排序的依据是',r)
l=['sd','ewr','d','ersf','df']
func(l)
字符串 ['sd', 'ewr', 'd', 'ersf', 'df'] 排序的依据是 ['df', 'ersf', 'd', 'ewr', 'sd']
#######################################仍然是整体
def func(s):
    r=s[::-1]
    print('字符串',s,'排序的依据是',r) 
l=['sd','ewr','d','ersf','df']
func(l)
l4=sorted(l,key=func)
print(l4)
字符串 ['sd', 'ewr', 'd', 'ersf', 'df'] 排序的依据是 ['df', 'ersf', 'd', 'ewr', 'sd']
字符串 sd 排序的依据是 ds
字符串 ewr 排序的依据是 rwe
字符串 d 排序的依据是 d
字符串 ersf 排序的依据是 fsre
字符串 df 排序的依据是 fd
Traceback (most recent call last):
  File "/home/tarena/test/demo/demo.py", line 68, in <module>
    l4=sorted(l,key=func)
TypeError: unorderable types: NoneType() < NoneType()
#########################################为什么多了个遍历，key=func
def func(s):
    r=s[::-1]
    print('字符串',s,'排序的依据是',r)
    return r 
l=['sd','ewr','d','ersf','df']
l4=sorted(l,key=func)
print(l4)

未找到 'cd' 命令，您要输入的是否是：
 命令 'hcd' 来自于包 'hfsutils' (main)
 命令 'mcd' 来自于包 'mtools' (main)
 命令 'bcd' 来自于包 'bsdgames' (universe)
cd：未找到命令
字符串 sd 排序的依据是 ds
字符串 ewr 排序的依据是 rwe
字符串 d 排序的依据是 d
字符串 ersf 排序的依据是 fsre
字符串 df 排序的依据是 fd
['d', 'sd', 'df', 'ersf', 'ewr']
################################################命名有倒序，为什么最后结果没有顺序且
没有颠倒

递归函数 recursion
    函数间接调用自己
说明：
	递归一定要控制递归的层数，当符合一定条件时要终止
	递归调用
	几乎所有的递归都能用while循环来代替
优缺点：
	优点是可以吧问题简单化，让思路更为清晰，代码更简洁
	缺点是因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果
递归函数调用分为两个阶段；
	递推阶段：从原问题出发，按递归公式递推从位置到已知，最终到达递归终止条件
	回归阶段：按递归终止条件求出结果，逆向逐步带入递归公式，回归原问题求解

def fx(n):
    print('递归进入第',n,'层')
    if n==3:
        return 
    fx(n+1)
    print('递归退出第',n,'层')
fx(1)
print('程序结束')

递归进入第 1 层
递归进入第 2 层
递归进入第 3 层
递归退出第 2 层
递归退出第 1 层
程序结束

（分析：第一次返回是（return）返回到上一个函数（也就是调用改函数的地方）
第二次是因为函数执行完返回到调用该函数的地方）

（递归分析方法：把每个函数调用都画一次，函数调用指向下一次调用的函数）

闭包：closure
	什么是闭包
		闭包是引用了此函数外部变量的函数
	闭包必须满足三个条件：
	1.必须有内嵌函数
	2.内嵌函数必须引用外部函数中的变量
	3.外部函数返回值必须是内嵌函数
def make_power(y):
    def fn(x):
        return x**y
    return fn
pow2=make_power(2)
print(pow2(5))

（说明：将fn，y=2绑定一个变量对象并形成一个包，见图形）
绑定的变量不会释放，所以会耗费内存

# def qiuhe(n):
#     sum=0
#     for i in range(1,n+1):
#         sum+=i**i
#     return sum
# print(qiuhe(5))

# def qiuhe(n):
#     if n==1:
#         return 1
#     return n**n+qiuhe(n-1)
# print(qiuhe(5))

print(sum(map(lambda x:x**x,range(1,6))))

练习:
  1. 编写程序求 1 ~ 20的阶乘的和
    即:
      1! + 2! + 3! + ... + 20!
  2. 改写之前的学生信息管理系统
    要求添加四个功能:
      | 5)  按学生成绩高-低显示学生信息 |
      | 6)  按学生成绩低-高显示学生信息 |
      | 7)  按学生年龄高-低显示学生信息 |
      | 8)  按学生年龄低-高显示学生信息 |

  3. 已知有列表:
    L = [[3, 5, 8], 10, [[13, 14], 15, 18], 20]
    1) 写个函数print_list(lst)  打印出所有的数字,即:
      print_list(L)  # 打印3 5 8 10 13...
    2) 写一个函数sum_list(lst) 返回这个列表中所有数字的和
       print(sum_list(L))  # 106
  注:
    type(x) 可以返回一个变量的类型,如:
       >>> type(20) is int  # True
       >>> type([1, 2, 3]) is list # True