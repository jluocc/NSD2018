生成器：
	生成器是指能够动态提供数据的可迭代对象
	生成器是在运行时生成数据,与容器类不同,它通常不会在内存中保存大量的数据,而是现用现生成


生成器有两种：
	1.生成器函数
	2.生成器表达式
生成器函数：
	含有yield语句的函数是生成器函数，此函数被调用将返回一个生成器对象
	（yield翻译为产生或生成）

yield语句： （可以理解为return 的地方换成yield）
	语法：
	yield 表达式
说明；	
	yield用于def 函数中，目的是将此函数作用生成器函数使用
	yield用来生成数据，供迭代器的next（it）函数取值

	（return是用于普通函数的函数返回
	yield是用于生成器，yield就不会返回return的None）
################################生成器函数调用原理（用调试）
def myyield():
    print('被执行')
    yield 2
    yield 3
    yield 5
    yield 7
gen=myyield()　　　#函数没有被执行
# it=iter(gen)  #拿到迭代器，生成函数不执行
# print(next(it))　　　　　　＃这里才开始执行函数，执行到第一个yield
# print(next(it))　　　　　　　＃下一个yield
# for i in myyield():
#     print(i)


生成器说明：
	生成器函数调用将返回一个生成器对象，生成器对象是可迭代对象
	在生成器函数内调用return语句会触发一个StopIteration异常（即生成数据结束）

	(变量和调用到的位置都不会被销毁)
	用算法生成的数据，不占计算机内存空间
def myinteger(n):
    i=0
    while i<n:
        yield i
        i+=1
for x in myinteger(5):
    print(x)
######################################
        
yield  i%2==0:（如果yield后面跟的是一个真假判断式，只会返回真与假）

生成器表达式：
	语法
		（表达式 for 变量 in 可迭代对象 [if 真值表达式]）
	说明：
		if 子句可以省略
	作用；
		用推导式形式创建一个新的生成器

l=[2,3,5,7]
l2=[x*10 for x in l]
it=iter(l2)
print(next(it))
# l[1]=30                ########这句话起不到任何的作用
print(next(it))

l=[2,3,5,7]
l2=(x*10 for x in l)
it=iter(l2)
print(next(it))
# l[1]=30      #####试着改变下标，改变位置
print(next(it))

20
30
20
300

20
30
20
30
l=[2,3,5,7]
l2=(x*10 for x in l)
it=iter(l2)
print(next(it))
l[2]=30    
print(next(it))
print(next(it))
20
30
300

生成器函数range,reversed,map,filter（返回的都是可迭代对象）

迭代工具函数：用来生成一个个性化的可迭代对象
函数  说明
zip(iter2[,iter2,...])返回一个zip生成器对象，此对象用于生成元组，元组的数据
分别来自于参数中的每个可迭代对象，生成元组的个数由最小的可迭代对象大小决定

enumerate(iterable,start=0)返回一个enumerate生成器对象，此对象生成类型为（索引，值）
的元组，默认索引从零开始，也可以用start指定

numbers=[10086,10000,10010,95588]
names=['中国移动','中国电信','中国联通']
for t in zip(numbers,names):
    print(t)
d=dict(zip(numbers,names))
print(d)

(10086, '中国移动')
(10000, '中国电信')
(10010, '中国联通')
{10000: '中国电信', 10010: '中国联通', 10086: '中国移动'}

（可迭代对象的两种打印方式，for in或者list,tuple,dict..）
用
##########################zip函数的写法
def myzip(iter1,iter2):
    it1=iter(iter1)
    it2=iter(iter2)
    while True:
        try:
            a=next(it1)
            b=next(it2)
        except StopIteration:
            break
        yield (a,b)
print(list(myzip(numbers,names)))

try:
    a=next(it1)
    b=next(it2)
    yield (a,b)
except StopIteration:
    return
（return 也可以用来终止循环，break的很多地方都可以用return 来代替,有return的地方如果还有
选择结果可以考虑不写else）

emumerate示例：
names=['中国移动','中国电信','中国联通']
for t in enumerate(names，10):
    print(t)
    
(10, '中国移动')
(11, '中国电信')
(12, '中国联通')
################################################
def printa(): 
    a=[]  
    while True:
        x=input('请输入：')
        # if x=='':
        #     break
        if not x:            ###########不能换为if x==False:
            return a
        a.append(x)
    # return a
for i in enumerate(printa(),1):
    # print('第%d行' % (i[0]+1),i[1],sep=':')
    print('第%d行：%s' % i)
#########################################################


字节串和字节数组：（字节串本身存的是整数）
序列；列表，元组，字符串，字节串，字节数组（有序的）(不可变序列就是有唯一的哈希值)
字节串（也叫字节序列） byte
作用：存储以字节为单位的数据
说明：字节串是不可改变的序列
字节byte：
	字节是0~255之间的整数，用来表示字节的取值（1字节0~255，数据传输的最小单位）
位 bit:（最小的存储单位） 1byte=8bit
创建空字节的字面值：（大小写b都可以）
b''
b""
b''''''
b""""""
创建非空的字节串字面值：
b'abcd'
b"ABCD"
b'\x41\x42\x43'
（只能在0~255之间，不能是中文的）
结果就是本身
b后面可以是英文，也可以是16进制

字节串的构造函数 bytes
bytes() 生成一个空的字节串,等同于b''
bytes(整型可迭代对象)  #用可迭代对象初始化一个字节串
bytes（整数n） 产生从n个值为0的字节串
bytes（字节串，encoding='utf-8'）用字符串的转换编码生成一个字节串
###############################################
print(bytes())
print(bytes(range(65,70)))
print(bytes(5))
print(bytes('ABC','utf-8'))##########这里可以查长度b=bytes('ABCD','utf-8')  print(len(b))
（encoding without a string argument）
print(bytes('中文','utf-8'))

b''
b'ABCDE'
b'\x00\x00\x00\x00\x00'
b'ABC'
b'\xe4\xb8\xad\xe6\x96\x87'
#############################windows下默认为gbk，linux下为utf-8
>>> print(bytes(range(1165,1170)))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: bytes must be in range(0, 256)
###########################################################可迭代对象在0-256之间

>>> print(bytes('ABC'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: string argument without an encoding
##########################################################
>>> print(bytes('ABC','utf-8'))
b'ABC'
>>> print(len(bytes('ABC','utf-8')))
3
#########################################################

bytes的运算：
	同其他的序列运算规则相同
	+ += * *=
	< > <= >= == !=
	in/not in
	索引/切片（不支持索引赋值）
>>> b1=b'ABD'
>>> b2=b'123'
>>> b1+b2
b'ABD123'

>>> a=b'abc 123 ABC'
>>> 0x31 in a
True
（说明里面存的是整数）
能用于字节串和字节数组的函数，那6个

bytes和str的区别
	bytes存储字节（字节是0~255的整数）
	str 存储unicode字符（字符是0~65535的整数）

bytes与str转换

bytes与str转换
		编码（encode）（转换成电脑看的懂）
str------------->bytes
	b=s.encode(encoding='utf-8')


       解码（encode）（人看的懂）
bytes--------------->str
	s=b.decode(ncoding='utf-8')

>>> s='我是中文'
>>> b=s.encode('utf-8')  ############ 默认是utf-8,中文三个字节
>>> b
b'\xe6\x88\x91\xe6\x98\xaf\xe4\xb8\xad\xe6\x96\x87'
>>> s2=b.decode()
>>> s2
'我是中文'

字节数组 bytearray
	可变的字节序列
字节数组的构造函数 bytearray
	bytearray() 生成一个空的字节数组,等同于b''
	bytearray(整型可迭代对象)  #用可迭代对象初始化一个字节数组
	bytearray（整数n） 产生从n个值为0的字节数组
	bytearray（字节数组，encoding='utf-8'）用字符串的转换编码生成一个字节数组

可变（list,set,bytearray）  增删改查极快
不可变（tuple,frozental,bytes） 唯一的哈希值，可作为键，值，且内存可能相对小点

运算：
	运算规则同序列完全相同
	+ += * *=
	< <= > >= == !=
	in/not in
	索引/切片
	字节数组支持索引和切片的赋值操作，规则同列表的赋值规则完全相同

>>> ba=(b'abcd1234')
>>> ba
b'abcd1234'
>>> ba[::2]=[0x20,0x20,0x20,0x20]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'bytes' object does not support item assignment####################不可分配，不可变的
>>> ba=bytearray(b'abcd1234')
>>> ba
bytearray(b'abcd1234')
>>> ba[::2]=[0x20,0x20,0x20,0x20]  ##########空格
>>> ba
bytearray(b' b d 2 4')   
###########################################
>>> ba=bytearray(b'a1b2c3d4')
>>> ba[::2]
bytearray(b'abcd')
>>> ba[1::2]
bytearray(b'1234')
>>> ba[::2]=['0x65','0x66','0x67','0x68']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: an integer is required
>>> ba[::2]=[0x65,0x66,0x67,0x68]
>>> ba
bytearray(b'e1f2g3h4')
>>> ba[::2]=[0x41,0x42,0x43,0x44]
>>> ba
bytearray(b'A1B2C3D4')
>>> ba[1::2]=range(65,69)
>>> ba
bytearray(b'AABBCCDD')
###################################################
>>> ba=bytearray(b'fsk')
>>> ba
bytearray(b'fsk')
>>> ba=bytes(ba)
>>> ba
b'fsk'
##########################
>>> ba=bytearray(b'fsk')
>>> ba[::2]=b'ab'
>>> ba
bytearray(b'asb')
#####################################