位置形参和命名关键字形参通常有缺省参数
元组和字典形参通常没有
（缺省参数放在后面）
函数变量
	函数名是变量，在创建的时候绑定一个函数（全局变量）
def fn():
    print('hello world')
f1=fn
（python的赋值是同时绑定一个对象，不是复制）
fn是指函数绑定的对象
fn()是指调用函数

def fn():
    print('hello world')
f1=fn
print(f1())
f1变量和fn变量同时绑定这个函数对象
hello world
None
函数创建的时候默认函数名变量绑定这个函数
def f1():
    print('hello f1')
def f2():
    print('hello f2')
f1,f2=f2,f1
f1()

hello f2


f1,f2=f1,f2理解为先同时放进一个包，在不同拿出

判断几条语句可用调试来判断
一个函数可以作为另一个函数的参数传入
def f1():
    print('hello f1')
def f2():
    print('hello f2')
def fx(fn):
    print(fn)
    fn()
fx(f1)

<function f1 at 0x7f1337d9a488>
hello f1

f1绑定的是<function f1 at 0x7f1337d9a488>
######################只是变量得到的就是变量名指向的函数，加（）就是函数对奥用
def goodbya(L):
    for x in L:
        print('再见',x)
def fx(fn,L):
    fn(L)
fx(goodbya,['Tom','Jerry','Spike'])

再见 Tom
再见 Jerry
再见 Spike

def goodbya(L):
    print('再见',*L)
def fx(fn,L):
    fn(L)
fx(goodbya,['Tom','Jerry','Spike'])

再见 Tom Jerry Spike
#############################################
def myinput(fn):
    l=[1,3,4,5,6]
    r=fn(l)
    return r
print(myinput(max))
print(myinput(min))
print(myinput(sum))

6
1
19
#############################################
函数可以作为另一个函数的返回值
def get_function():
    s=input('请输入你要做的操作:')
    if s=='求最大':
        return max
    if s=='求最小':
        return min
    if s=='求和':
        return sum
L=[2,3,5,8,10]
f=get_function()
print(f(L))
############################################
函数的嵌套定义
函数嵌套定义是指一个函数里用def语句来创建其他函数的情况
def fn_outter():
    print('fn_outter被调用')
    def fn_inner():
        print('fn_inner被调用')
    fn_inner()
    fn_inner()
    print('fn_outter调用结束')
    return fn_inner             ##########(函数结束后变成全局变量)
f=fn_outter()
f()

fn_outter被调用
fn_inner被调用
fn_inner被调用
fn_outter调用结束
fn_inner被调用

内建函数调试的时候进不去
python的作用域
	作用域也叫命名空间，是访问变量是查找变量名的范围空间

python的四个作用域；
          作用域           英文                               简写
	局部作用域（函数内）  Local                                L
	外部嵌套函数作用域    Enclosing function local              E
	函数定义所在模块作用域  Global                              G 
	python内建模块的作用域  Builtins(python)                     B
python的全局指的是模块内的全局

v=100
def f1():
    v=200
    print('f1.v=',v)
    def f2():
        v=300
        print('f2.v=',v)
    f2()
f1()
print('全局的v=',v)
优先找优先级比较高的，没有就往外面找，也就是函数最里面的

del max     ####删除函数
del max()      #####调用函数
变量才有作用域
对象没有
L=[1,2,3]   前者是变量，后者对象

变量名的查找规则
	在访问变量是，先查找本地变量，然后是包裹此函数
	外部的函数内部的变量，之后是全局变量，最后是内建变量
	在默认的情况下，变量名赋值会创建或者改变本地作用域内的变量
l=[1,2]
def f2():
    l+=[3,4,5]  (l=l+[3,4,5],不能将右边的全局变量赋值给左边的局部变量)
f2()
print(l)
#######################################################
l=[1,2]
def f1():
    l=[3,4,5]
f1()
print(l)
def f3():
    l[:]=[3,4,5]
f3()
print(l)
####################################################
[1, 2]
[3, 4, 5]
##################################

global 语句
	作用：
		告诉解释执行器global语句声明的一个或多个变量，这些变量的作用域
		为模块级作用域（也称全局变量）
	全局声明（global）将赋值语句的变量映射到模块文件内部的作用域
	语法:
		global 变量1，变量2，...
	示例见：
		global.py

说明：
全局变量如果要在函数内部被赋值，则必须经过全局声明，否则会被认为是局部变量
全局变量在函数内部不经过全局声明就可以访问（取值）
不能先声明局部变量，再用 global声明为全局变量，此做法不符合规则
global变量列表里的变量名不能出现在函数的形参列表中

nonlocal语句
作用：
告诉解释执行器，nonlocal声明的变量不是局部变量，也不是全局变量，而是
外部嵌套函数内的变量
语法：
	nonlocal  变量名1，变量名2...
var=100
def f1():
    var=200
    print('f1.var=',var)
    def f2():
        nonlocal var
        var=300
        print('f2.var=',var)
    f2()
    print('f1.var=',var)
f1()
print('全局的var＝',var)
*****************************
f1.var= 200
f2.var= 300
f1.var= 300
全局的var＝ 100
##################################################
说明：nonlocal语句只能在嵌套函数内部进行使用
对nonlocal变量列表内的变量赋值经对外部嵌套作用域内的变量
进行操作
当有两层或两层以上的嵌套函数是，访问nonlocal变量只对最近的一层
变量进行操作
nonlocal语句变量列表里的变量名，不能出现在此函数的形参列表中


lambda表达式
作用：
	创建一个匿名函数对象，同def类似，但不提供函数名
语法：
lambda   [函数形参列表]： 表达式（不能是语句）

def myadd(x,y):
    return x+y
# myadd=lambda x,y:x+y
print(myadd(18,34))

# fx=lambda x,y:x if x>y else y
# print(fx(3,6))
# print(fx('sdf','dfv'))
6
sdf

说明：
	lambda表达式创建的函数只能包含一条表达式且直接返回
	表达式的值
	lambda比原函数简单，且可以随时创建和销毁，有利于减少
	程序的耦合度（各个对象之间关联的复杂程度）
fx=lambda x:(x**2+1)%5==0)
print(fx(3))
print(fx(4))

True
False
#######################################################

eval()和exec()函数
eval 函数 ####必须放表达式
	作用：把一个字符串当表达式来执行
	格式：
	eval(source,glabal=None,local=None)  后面两个是字典
	如：
	s="1+2*3"
	v=eval(s)
	print(v)

	7
#####################################
s='x+y'
v2=eval(s,None,{'x':1,'y':3})
print(v2)
v3=eval(s,{'x':10,'y':20},{'y':2})
print(v3)

4
12
################################
exec 函数 ####必须放表达式
	作用：把一个字符串当程序来执行
	格式：
	exec(source,glabal=None,local=None)

>>> a="x=100\ny=200\nprint('x+y',x+y)"
>>> exec(a)
x+y 300
>>> print(a)
x=100
y=200
print('x+y',x+y)

      1
     1 1 
   1 3 3 1