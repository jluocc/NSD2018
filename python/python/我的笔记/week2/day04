函数的参数：
1.函数调用实际传递参数（把数据给函数）
2.函数的形式参数（从调用者拿来（接收）数据）
（函数调用的时候参数是实际参数，声明定义的时候是形式参数）
函数的实际调用参数传递
传递方式：
	1，位置传参
		1.1 序列传参
	2.关键字传参
		2.2 字典关键字传参
位置传参：
	实际参数（实参）的对应关系与形式参数（形参）的对应
	关系是按位置来依次对应的
说明：实参个数必须与形参个数相同

序列传参：
序列：字符串，列表，元组
序列传参是指在函数调用过程中，用*(星号)将序列
拆解后按位置进行传递的传参方式
说明：
	序列传参时，序列拆解的位置将与形参一一对应
	序列的位置信息对应相应的位置
def myfun(a,b,c):
    print('a的值是',a)
    print('b的值是',b)
    print('c的值是',c)

a1=[11,12,14]
a2='abc'
myfun(*a2)
########################################
l=[3,5]
def f1(a):
    print(*a)
f1(l)

3 5
#########################
l=[3,5]
def f1(*a):
    print(a)
f1(l)

([3, 5],)
#########################################带*的形参会把实际参数当成元组分解，但是注意如果传进来的是一个可迭代对象
 ##########################没有进行分解，就会是([3, 5],)这种情况，参数个数必须相等，如果形参和实参都带*，则可以不用管
l=[3,5]
def f1(*a):
    print(a)
f1(*l)

(3, 5)
##############################################
l=[3,5]
def f1(*a):
    print(*a)
f1(*l)

3 5
#####################################################
l=[3,5]
def f1(a):
    print(*a)
f1(*l)

TypeError: f1() takes 1 positional argument but 2 were given
##############################################################

关键字传参：
	关键字传参是指传参时，按着形参的名称给形参赋值
	实参和形参按名称进行匹配
说明：实参和形参可以不按位置进行匹配
def myfun(a,b,c):
    print('a的值是',a)
    print('b的值是',b)
    print('c的值是',c)
myfun(c=200,b=100,a=45)

字典关键字传参
	是指实参为字典 将字典用 **(双星号) 拆解后进行
	关键字传参的传参方式
def myfun(a,b,c):
    print('a的值是',a)
    print('b的值是',b)
    print('c的值是',c)
d1={'c':200,'b':100,'a':45}
myfun(d1['a'],d1['b'],d1['c'])
myfun(a=d1['a'],b=d1['b'],c=d1['c'])
myfun(**d1)   #等同于myfun(a=45,b=200,c=300)
#####################################################
def f1(a,b,c,d):
    print('a=',a)
    print('b=',b)
    print('c=',c)
    print('d=',d)
d={'a':2,'c':3,'d':6,'b':4}
print(f1(d['a'],d['c'],d['b'],d['d']))  ####（位置传参）
print(f1(a=d['a'],c=d['c'],b=d['b'],d=d['d']))#####（关键字）
print(f1(**d))                    #########字典

（不用print就不会打印None）
#################################################
a= 2
b= 3
c= 4
d= 6
None
a= 2
b= 4
c= 3
d= 6
None
a= 2
b= 4
c= 3
d= 6
None################################################

说明：
	字典的键名和形参名必须一致（个数名字都要一致）
	字典的键名必须是字符串，且必须为标识符的命名规则
	字典的键名要在形参中存在

（可以混合传参，但是有顺序，位置必须在关键字参数的前面）

函数综合传参
	参数的传参方式，在能确定形参能唯一匹配到相应实参的情况下
	可以任意组合
	函数的位置传参要先于关键字传参
	1.函数的位置传参和序列传参可以混合使用，可以顺序颠倒
	2.函数位置传参和关键字传参可以混合使用
	myfun(100,c=300,b=200)
	myfun(100,**{'c':300},b=200)

---------------------------以下讲的函数的定义及函数的形参------------------------
函数的缺省参数
语法：
	def 函数名（形参名1=默认实参1，形参2=默认参数2，...）：
		语句块

def info(name,age=1,address='不详'):
    print(name,'今年',age,'岁','家庭住址:',address)
info('大海',20,'上的花费')
info('sdh')

	说明：缺省参数必须从右到左依次存在，如果一个参数有缺省参数
	则其右侧的所有参数都必须有缺省参数
	2.缺省参数可以有0个，1个或多个，甚至全部都是缺省参数

函数形参的定义方式；
	位置形参
	星号元组形参
	命名关键字形参.
	双星号字典形参

位置形参：（适用于参数少的情况）
	语法：
		def 函数名（形参名1，形参名2，...）：
			语句块

星号元组形参
	语法：
	def 函数名（*元组形参名）；
		语句块
	作用：
		收集多余的位置传参
	说明：
		元组形参名一般命名为'args'
def fun(*args):
    print('用户传入的参数个数是',len(args))
    print('args=',args)
fun()
fun(1,3,4,6,67)
fun(3,5,9,'sd','sdf')
#############################################
用户传入的参数个数是 0
args= ()
用户传入的参数个数是 5
args= (1, 3, 4, 6, 67)
用户传入的参数个数是 5
args= (3, 5, 9, 'sd', 'sdf')
####################################################


def mysum(*args):
    # sum=0  
    # for i in args:
    #     sum+=i
    # print(sum)
    print(sum(args))
mysum(1,2)
mysum(10,20,30,40)

3
100
注意：这里会有变量名和函数名冲突
TypeError: 'int' object is not callable
##########################
def min_max(a,*args):
    print('a:',a)
    print('args:',args)
print(min_max(10,20,30))
*****************************
a: 10
args: (20, 30)
None
###############################
def min_max(a,*args):
    zuixiao=min(args)
    if a<zuixiao:
        zuixiao =a
    zuida=max(args)
    if a>zuida:
        zuida=a
    return (zuixiao,zuida)
print(min_max(10,20,30))
x,y=min_max(4,6,3,9,6,0,1,8,3)
print('最小值是：',x)
print('最大值是：',y)
*******************************
如果*args为空会报错
################################

def min_max(a,*args):
    zuixiao=a
    for x in args:
        if zuixiao>x:
            zuixiao=x
    
    zuida=a
    for x in args:
        if zuida<x:
            zuida=x
    return (zuixiao,zuida)
print(min_max(10,20,30))
######################################
命名关键字形参：
语法；
	def 函数名（*,命名关键字形参1，命名关键字形参2，...）：
		语句块
	#或
	def 函数名（*args，命名关键字形参1，命名关键字形参2,...）：
		语句块

	作用：强制所有的命名关键字形参都必须用关键字传参或字典关键字传参

def f1(*,c,d):      #＊是语法，可以不用管，
    print('c=',c)
    print('d=',d)
f1(d=4,c=5)　　　　
d1={'c':30,'d':40}
f1(**d1)
#################################
def f2(a,b,*args,c,d):
    print(a,b)
    print(args)
    print(c,d)
f2(1,2,3,4,d=200,c=100)
******************
1 2
(3, 4)
100 200
#################################
def f2(a,b,*args,c,d):
    print(a,b)
    print(args)
    print(c,d)
# f2(1,2,3,4,d=200,c=100)
f2(11,22,33,**{'c':34,'d':5})

11 22
(33,)
34 5
##################################注意结果

双星号字典形参：
语法：
	def 函数名（**字典形参名）：
		语句块
作用：收集多余的关键字传参
说明：字典形参名一般命名为'kwargs'
###################################################
def fun(**kwargs):
    print('关键字传参个数是',len(kwargs))
    print('kwargs=',kwargs)
fun(a=1,b='bbbb',c=[1,3,5])
fun()


关键字传参个数是 3
kwargs= {'b': 'bbbb', 'a': 1, 'c': [1, 3, 5]}
关键字传参个数是 0
kwargs= {}
######################################################

函数的参数说明：
位置形参，星号元组形参，命名关键字形参，双星号字典形参，缺省参数可以混合使用

函数参数从左到右的顺序为：
位置形参 星号元组形参 命名关键字形参 双星号字典形参
def fx(a,b,*args,c,d,**kwargs):
    pass
fx(1,2,3,4,5,c='C',d='D',e='E')

#可以接收任意的位置传参和关键字传参的函数：
def fn(*args,**kwargs):
    print('args:',args)
    print('kwargs:',kwargs)
fn(2,34,6,*'abcd',[11,22],c=100,**{'a':200}) （调用的时候*用来拆）

args: (2, 34, 6, 'a', 'b', 'c', 'd', [11, 22])
kwargs: {'a': 200, 'c': 100}

缺省参数放在后面（常用来参数不确定，有默认值的时候，可有可无的参数值为None）

自写 range函数
def myrange(star,stop=None,step=1):
    if step>0:
        if stop==None:        （修改  if stop is None  (因为默认是None，但是键盘什么都没输入要用'')）
            a=0
            while a<star:
                print(a)
                a+=1
        else:
            while star<stop:
                print(star)
                star+=step
    else:
        while stop<star:
            print(star)
            star+=step  
myrange(4)
print('**************')
myrange(1,6)
print('**************')
myrange(6,1,-2)

全局变量和局部变量
局部变量
	定义在函数内部的变量称为局部变量（函数的形参也是局部变量）
	局部变量只能在函数内部使用
	局部变量在函数调用时才能够被创建，在函数调用之后会自动销毁
全局变量：
	定义在函数外部，模块文件内部的变量称为全局变量
	全局变量，所有的函数都可以直接访问（但不能直接将其赋值）
a=100
b=200
def fx(c):
    d=400
    print(a,b,c,d)
fx(300)
print('a=',a)
print('b=',b)

说明：在函数内部的赋值语句会创建局部变量，不会对全局变量
造成影响
局部变量只能在其被声明的函数内部访问，而全局变量可以在整个模块范围内
访问

globels()和locals（）函数
globels（）返回当前全局作用域内变量的字典
locals（）返回当前局部作用域内变量的字典

a=1
b=2
c=3
def fn(c,d):
    e=300
    print('locals() 返回:',locals())
    # print('globals() 返回:',globals())
fn(100,200)

locals() 返回: {'c': 100, 'e': 300, 'd': 200}

'fn': <function fn at 0x7fbf23617488>（还有很多）

 print(c)
 print(globals()['c'])

100
3