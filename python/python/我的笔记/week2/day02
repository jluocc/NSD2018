元组  tuple（元组具有先后顺序）
	元组是不可变的序列，同list一样，元组可以放任意类型的数据

表示方式：
	用小括号()括起来，单个元素括起来后加逗号(,)，区分单个对象还是元组
创建空元组的字面值：
	t=()   #空元组
创建非空元组的字面值表示
	t=200      #含有一个元素的元组
	t=(20,)    #含有一个元素的元组
	t=(1,2,3)
	t=100,200,300
type(x)   函数返回一个对象的类型
元组的错误示例；
    t=(20)   #t绑定整数20
    x,y,z=100,200，300#序列赋值，不是元组
    x,y,z=(100,200,300)
    x,y,z=[100,200,300]
    x,y,z='abc'
x,y,z='abc'
a
b
c


元素的构造函数：
tuple()    创建空元组  等同于()   （随后一个值一个值的赋值）
tuple(iterable)   用可迭代对象生成一个元组
如：
t=tuple()  #空元组
t=tuple(range((1,100,3))
t=tuple('abc')
t=tuple([a,b,c])

元组的运算：
#####################################只有一个元素会直接数学相加
>>> t=(1)
>>> t2=(2)
>>> t+t2
3   不是元组
>>> t3=t+t2
>>> t3
3
>>> t=(1,4)
>>> t2=(2,9)
>>> t3=t+t2
>>> t3
(1, 4, 2, 9)
>>> t=(1)
>>> t
1
#####################################
(1, 4, 2, 9, 1, 4, 2, 9)
>>> id(t3)
2552872138376
>>> t3*2
(1, 4, 2, 9, 1, 4, 2, 9)
>>> id(t3)
2552872138376
#########################################  t3*2并没有绑定一个新的对象，还是t3
+ += * *=（如果是字符串地址会变，因为是不可变对象）（等同于字符串的加乘运算规则）
< <= > >= == != （等同于列表的比较规则）
in /not in 
索引/切片(所有的序列都支持)

>>> 1,2,3>1,2
(1, 2, True, 2)
>>> (1,2,3)>(1,2)
True             （>的优先级大于,）
>>> (1,'二')>('二',1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: '>' not supported between instances of 'int' and 'str'
>>> (1,'二')!=('二',1)
True
>>> (1,'二')==('二',1)
False
不同类型的不能比较大小，但是能比较是否相等

in/not in 运算符
同列表的in运算符相同，用于检测一个值是否存在元组中，如果存在返回True,否则
返回False
not in 与in 返回值取反

索引和切片操作：
用法等同于列表的索引和切片操作
元组不支持切片的赋值操作
如：
t=(1,2,3,4)
print(t[2])   #3 
>>> t=(2,5,7)
>>> t[-1]=3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment

序列构造函数
str([obj])
list([iterable])
tuple([iterable])

翻转函数：
reversed(iterable)  
如：
>>> for x in reversed('abc'):
...     print(x)
...
c
b
a

>>> for x in reversed(['a',12,4]):
...     print(x)
...
4
12
a

不可变对象就是不能实现增删改，可以查询

字典 dict（高效，增删改查，但是耗费内存）
字典是一种可变的容器，可以存储任意类型的数据
字典中的每个数据都是用'键'(key)进行索引，而不像
序列(字符串，列表，元组)可以用索引下标进行索引
字典中的数据没有先后关系，字典的存在是无序的
字典中的数据以键(key)-值(value)对形式进行映像存储
字典的键不能重复，且只能用不可变类型作为字典的键
（可变，无序，无重）任何类型数据


字典的表示方式是以{}括起来，以冒号（：）分隔键值对，
各键值对之间用逗号分隔开

创建空字典的字面值
d={}  #空字典
创建非空字典字面值：
d=['name':'tarena','age':17]
必须存一对，不能只有其中任何一个
d={'a':tuple('abc')}   #值为元组
{'a': ('a', 'b', 'c')}（12并不能表示1,2）
d={Ture:'真值'}
d={(1970,1,1):'计算机元年'}      不能是列表

字典的值可以是任意类型
字典的键只能是不可变类型
     不可变类型 ；
     bool,int ,float,complex,str,tuple
     可变类型
     list,dict ,set(集合),bytearray(字节数组)

字典的构造函数 dict
dict()    生成一个空字典，等同于{}
dict(iterable)    用可迭代对象和初始化一个字典
dict(**kwargs)    用关键字传参形式生成一个字典
如
d=dict()
d=dict([('name','tarena'),('age',15)])  #可迭代对象提供的数据是有两个，每个可迭代对象里的元素都是一个键值对
元素的序列
d=dict(name=tarena,age=15)##########错的

>>> l=[('name','tarena'),['age',15],'ab']  (必须是序列，且两个元素)
>>> d=dict(l)
>>> d
{'name': 'tarena', 'age': 15, 'a': 'b'}

>>> dict(name='tarena',age=15,a='b')  （键变量不能是数字之类的，符合变量的定义）
{'name': 'tarena', 'age': 15, 'a': 'b'}

d={}
d[1]='sdf'
d[2]=45
print(d)

字典的基本操作
字典的键索引
语法；
	字典[键]
作用：
	用过[]运算符进行取值操作
示例：
	d={'name':'tarena','age':16}
	print(d['name'],'今年',d['age'],'岁')

>>> d={'name':'tarena','age':16}
>>> d['name']
'tarena'
>>> d['age']
1

添加和修改字典元素
语法：
	字典[键]=值
说明:
	键不存在，创建键并绑定对应的值
	键存在，修改键绑定的值
如
>>> d={}
>>> d['name']='tarena'
>>> d['age']=20
>>> d
{'name': 'tarena', 'age': 20}
>>> d['age']=16
>>> d
{'name': 'tarena', 'age': 16}

>>> b=dict((['name','ewr'],('age',15)))
>>> b
{'name': 'ewr', 'age': 15}
>>> a=dict(name='hdsf',age=15)
>>> a
{'name': 'hdsf', 'age': 15}
d={'name': 'tarena', 'age': 20}

删除字典键值对
del  语句
语法；del 字典[键]

字典的in/not in运算符
可用过in运算符来判断一个键是否存在字典中，
如果存在则返回True,否则返回False
not in 相反
>>> a={'name':'werhjj','id':2342}
>>> 'name' in a
True
>>> 'werhjj' in a
False
（只判断键）

d=dict('1'='sdf','2'='sdfe')
print(d)

File "day02.py", line 1
    d=dict('1'='sdf','2'='sdfe')
          ^
SyntaxError: keyword can't be an expression
a={
    1:'1yue',
    2:'2yue', 
    3:'3yue',
    4:'3yue'} 
print(a) 
####################################
a={}
a[1]='1yue'
a[2]='2yue'
a[3]='3yue'
print(a) 


字典的迭代访问：
	字典是可迭代对象，字典只能对键进行迭代访问
	示例
d={'name':'tarena',(2002,11,1):'生日'}
for k in d:
	print(k,'对应的值是',d[k])

name 对应的值是 tarena
(2002, 11, 1) 对应的值是 生日

可以用于字典的内建函数（元组也行）
len(x)   返回字典的键值对的个数
max(x)   返回字典键的最大值
min(x)   返回字典键的最小值
sum(x)   返回字典中所有键的和
any(x)   真值测试，如果字典中一个键为真值则返回True
all(x)   真值测试，如果字典中全部键为真值才返回True
只看键

字典的方法
d1={1:'yi',2:'er'}
d2={2:'sd'}
d1.update(d2)
print(d1)
print(d2)

{1: 'yi', 2: 'sd'}
{2: 'sd'}
#########################################
d1={1:'yi',2:'er',3:'san',4:'si'}
print(d1.get(1))
a=d1.get(5)
if a==None:
    print('meiyouzhegejian')   ##（不会报错）

yi
meiyouzhegejian
###################################
d可用for循环，d.keys（）也可以，d.values())也可以，d.item()也可以
for k,v in d.items()；
	print(k,v)

for t in d.items()；
	print(t)

###############################################################
# y=input('请输入一个字符串')
# x={'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0}
# for i in y:
#     for j in x:
#         if i==j:
#             x[j]+=1
#             break
# for k,v in x.items():
#     print(k,'出现了',v,'次')
###############################################################
s=input('请输入一个字符串')
d={}
for ch in s:
    if ch in d:
        d[ch]+=1
    else:
        d[ch]=1
for k,v in d.items():
    print(k,'出现了',v,'次')
############################################################

字典推导式         #####只有可变的对象才有
是用可迭代对象依次生成字典内元素的表达式
语法 
{键表达式：值表达式 for 变量  in  可迭代对象 [if 真值表达式]}
注：[]的内容代表可省略
示例：
#生成一个字典，键为数字1-9，值为键的平方
d={x:x**2 for x in range(1,10)}


字典（散列存储）VS列表（连续存储）
都是可变的容器
索引方式不同，列表用哪个整数索引，字典用键索引
字典的插入，删除，修改的速度可能会快于列表（重要，需要数据量）
列表的存储是有序的，字典的是无序的

d.keys和d.values不可赋值