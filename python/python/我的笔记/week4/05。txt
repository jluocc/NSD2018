1.加法重载
class MyNumber:
    '自定义数字'
    def __init__(self,value):
        self.data=value
    def __repr__(self):
        return 'MyNumber(%d)' % self.data
    def add(self,other):
        v=self.data+other.data
        obj=MyNumber(v)
        return obj
n1=MyNumber(100)
n2=MyNumber(200)
n3=n1.add(n2)
# n3=n1+n2
print(n1,'+',n2,'=',n3)

class MyNumber:
    '自定义数字'
    def __init__(self,value):
        self.data=value
    def __repr__(self):
        return 'MyNumber(%d)' % self.data
    def __add__(self,other):
        v=self.data+other.data
        obj=MyNumber(v)
        return obj
n1=MyNumber(100)
n2=MyNumber(200)
n3=n1+n2  #等同于n3=n1.__add__(n2)
print(n1,'+',n2,'=',n3)

MyNumber(100) + MyNumber(200) = MyNumber(300)
MyNumber(100) + MyNumber(200) = MyNumber(300)
--------------------------------------------------
-----重载加号，乘号
class Mylist:
    def __init__(self,iterable=()):
        self.data=[x for x in iterable]
    def __repr__(self):
        return 'Mylist(%s)' % self.data  
    def __add__(self,other):
        v=self.data+other.data
        obj=Mylist(v)
        return obj
    def __mul__(self,other):
        v=self.data*other
        obj=Mylist(v)
        return obj
    def __rmul__(self,other):
        v=self.data*other
        obj=Mylist(v)
        return obj
L1=Mylist(range(1,4))
L2=Mylist([4,5,6])
L3=L1+L2
print(L3)
L4=L2+L1
print(L4)
L5=L1*3
print(L5)
L6=L1*2
print(L6)

Mylist([1, 2, 3, 4, 5, 6])
Mylist([4, 5, 6, 1, 2, 3])
Mylist([1, 2, 3, 1, 2, 3, 1, 2, 3])
Mylist([1, 2, 3, 1, 2, 3])
----------------------------------------------------
自己写的Mylist
L1+=L2 和L1=L1+l2区别

class Mylist:
    def __init__(self,iterable=()):
        self.data=[x for x in iterable]
    def __repr__(self):
        return 'Mylist(%s)' % self.data  
    def __add__(self,other):###############id会变
        v=self.data+other.data
        obj=Mylist(v)
        return obj
    # def __iadd__(self,rhs):
    #     self.data.extend(rhs.data)#################id不会变
    #     return self             
L1=Mylist(range(1,4))
L2=Mylist([4,5,6])
print(id(L1))
L1+=L2
print(id(L1))
print('L1:',L1)
print('L2:',L2)

139769610060912
139769610061136
L1: Mylist([1, 2, 3, 4, 5, 6])
L2: Mylist([4, 5, 6])
----------------------------------------------------
>>> l=[1,2]
>>> l2=[2,3]
>>> id(l)
2279092427144
>>> l+=l2
>>> id(l)
2279092427144
>>> l=l+l2
>>> id(l)
2279092439624
--------------------------------------------list内有__iadd__方法
class Mylist:
    def __init__(self,iterable=()):
        self.data=[x for x in iterable]
    def __repr__(self):
        return 'Mylist(%s)' % self.data  
    def __neg__(self):
        # return [-x for x in self.data]
        
        # a=(-x for x in self.data)########得到的是一个可迭代对象，不能直接打印
        # return Mylist(a)

        L=map(lambda x:-x,self.data)
        return Mylist(L)
        (注意上面这三个表达式的区别，结果一样，但是第一个耗费内存)
L1=Mylist([1,-2,-3,4])
L2=-L1
print(L2)

Mylist([-1, 2, 3, -4])
-------------------------------------------------------
    def __pos__(self):
        a=(abs(x) for x in self.data)
        return Mylist(a) 
-----------------------------------------------------------------
in /not in 重载
class Mylist:
    def __init__(self,iterable=()):
        self.data=[x for x in iterable]
    def __repr__(self):
        return 'Mylist(%s)' % self.data  
    def __contains__(self,e):
        return e in self.data      
L1=Mylist([1,-2,-3,4])
print(3 in L1)
print(4 in L1)
print(3 not in L1)

False
True
True
------------------------------------------------------------------
索引操作
class Mylist:
    def __init__(self,iterable=()):
        self.data=[x for x in iterable]
    def __repr__(self):
        return 'Mylist(%s)' % self.data  
    # def __getitem__(self,i):
    #     for a,b in enumerate(self.data):  
    #         if a==i:
    #             return b
    def __setitem__(self,i,v):      ###############值确实被修改了，但是没有改进入列表
        for a,b in enumerate(self.data):  
            if a==i:
                print(b)
                b=v
                print(b)
                return self.data
    # def __delitem__(self,i):
    #     for a,b in enumerate(self.data):  
    #         if a==i:
    #             self.data.remove(b)
    #             return self.data
    # def __getitem__(self,i):
    #     return self.data[i]
    # def __setitem__(self,i,v):
    #     self.data[i]=v
    # def __delitem__(self,i):
    #     del self.data[i]
       
L1=Mylist([1,-2,-3,4])
# print(L1[2])
L1[2]=8
print(L1)
# del L1[1]
# print(L1)
----------------------------------------------------
切片操作
class Mylist:
    def __init__(self,iterable=()):
        self.data=[x for x in iterable]
    def __repr__(self):
        return 'Mylist(%s)' % self.data  
    def __getitem__(self,i):
        if type(i) is int:
            print('索引操作')
        elif type(i) is slice:
            print('切片操作')
            print('起始值：',i.start)
            print('终止值：',i.stop)
            print('步长：',i.step)
        return self.data[i]
       
L1=Mylist([1,-2,-3,4])
x=L1[1::2]
print(x)
y=L1[2]
print(y)

切片操作
起始值： 1
终止值： None
步长： 2
[-2, 4]
索引操作
-3
----------------------------------------------------------
特性属性（get,set）
class Student:
    def __init__(self,s):
        self.__score=s
    @property
    def score(self):
        return self.__score

    @score.setter
    def score(self,s):
        assert 0<=s<=100,'成绩超出范围'
        self.__score=s
        
s1=Student(59)
print(s1.score)
s1.score=99
print(s1.score)

59
99
------------------------------------------------------
with用法

# with.py
try:
    f = open("text.txt", 'w')
    try:
        s = int(input("请输入整数:"))  #故意制造异常

        f.write("hello")
    finally:
        f.close()
except OSError:
    print("文件打开失败")
except: 
    print("读取数据失败")
----------------------------------------------------
# with.py
try:
    # 用with语句实现
    # f = open("text.txt", 'w')
    with open("text.txt", 'w') as f:
        s = int(input("请输入整数:"))  #故意制造异常

        f.write("hello")
except OSError:
    print("文件打开失败")
except: 
    print("写入数据失败")
------------------------------------------------------