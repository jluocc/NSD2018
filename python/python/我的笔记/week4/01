  生成器
    生成器函数
      含有yield 语句的函数
         1. 返回生成器对象(生成器对象也是可迭代对象)
         2. 执行顺序与普通函数不同
           1) 当next(it)函数调用时,生成器函数才执行
           2) 当遇到yield语句时,保存当前函数的执行状态,将yield 表达式 结果返回给next(it) 函数
           3) 生成器的返回会触发StopIteration异常
        def myyield():
            yield 1
            yield 2

    生成器表达式:
      (表达式 for 变量 in 可迭代对象 if ...)

file
	什么是文件
		文件是用于数据的存储的单位
		文件通常用于长期存储数据
		文件中的数据是以字节为单位进行顺序存储的

文件的操作流程
	1.打开文件
	2.读/写文件  （读写就是input/output,也就是i/o）
	3.关闭文件

（内存，快，断电数据丢失，
硬盘，慢，断电数据不会丢失，容量大，价格便宜）

文件的打开函数：
	open（file,mode='rt'）用于打开一个文件，返回此文件流对象，如果打开失败，则会触发。（路径相对和绝对路径都可以）
	mode默认不写就是'rt'
	OSError错误

文件的关闭方法：
	F.close()        关闭已经打开的文件，释放系统资源

文本文件的基本操作：
	读文件：
		f.readline()    #读取一行文字（长度会把换行一起算，打印单行的时候也会把换行一起打）

			f=open('demo/mynote.txt')
			a=f.readline()
			print(a)

			小李　　　13888888888
			（有空行）

		f.readlines()   #读取多行文字
		f.read(n)     #读取n个字符（不加则默认读取所有的）
	写文件：
		f.write(字符串)   #写字符串到一个已经打开的文件
		f.writelines（字符串列表）#写多个字符串到已经打开的文件中

文本文件读写时个操作系统的换行符问题
linux换行符:'\n'
window换行符:'\r\n'  （会比其他系统多一个字节）
旧的Macintosh的换行符：'\r'
新的Mac OS X的换行符：'\n'

（linux 的vs code窗口下有一个lf选项，lf默认是'\n'，crlf就是'\r\n'）

文本文件操作说明：
	文本模式下，各操作系统的换行符在读入python内部时会自动转换为'\n'

写文本文件的示例（可以没有这个文件，便是创建，当前目录下创建）
f=open('demo/myfile.txt','w')
print('打开文件成功')
f.write('这是第一行文字')
f.write('\n\n')
f.write('ASGDHJ')
f.writelines(['aaaaa',
            'bbbb',
            'ccccc'])
print('写文件成功')
f.close()

这是第一行文字

ASGDHJaaaaabbbbccccc
（如果本来有这个文件，则会将原来的覆盖，重新生成
文本文件的操作必须都是字符串）

文件的迭代读取：
	文件流对象是可迭代对象，迭代过程将以换行符'\n'作用分隔符依次获取（写不行）
	如：
		f=open('文件路径')
		for line in f:
			print(line)

二进制文件操作
	操作模式字符：'b'
	默认文件中存储的都是以字节（bytes为单位的数据，通常有人为规定的格式）
	对二进制文件的读写需要用字节串(bytes)进行操作
	F.read()的返回类型：
		对于文本模式，F.read()返回类型为字符串str
		对于二进制模式，F.read()返回字节串bytes
##########################################################
f=open('demo/mynote.txt','rb')
b=f.read()
print('读取的内容长度是',len(b))
print('内容是：',b)
s=b.decode()
print('转为字符串值为：',s)
f.close()

读取的内容长度是 69
内容是： b'\xe5\xbc\xa0a\xe3\x80\x80\xe4\xb8\x8a\xe6\xb5\xb7\n\xe5\xbc\xa0b\xe3\x80\x80\xe5\x8c\x97\xe4\xba\xac\n\xe6\x9d\x8ec\xe3\x80\x80\xe6\xb7\xb1\xe5\x9c\xb3\n\xe7\x8e\x8bd\xe3\x80\x80\xe5\xb9\xbf\xe4\xb8\x9c\n\xe6\x9d\x8ee  \xe5\x9b\x9b\xe5\xb7\x9d\n'
转为字符串值为： 张a　上海
张b　北京
李c　深圳
王d　广东
李e  四川
(依然有空行,因为写的时候换行了，主要看光标)

（xxb+文件，以16进制打开文件
subl+文件， 用subl打开文件）

二进制比文本文件的区别，二进制把文件看成字节串
文本文件把文件看成字符串，二进制不会对文件进行操作，
而文本文件会对文件进行decode,encode操作（如'\r\n'会少前面一个）
（code+文件名，用code打开文件）

f.tell()  返回当前文件流的绝对位置
##########################################
f=open('demo/myfile.txt','rb')
f.read(3)
print('当前的读写位置是：',f.tell())
f.read(10)
print('当前的读写位置是：',f.tell())
f.close()
########################
当前的读写位置是： 3
当前的读写位置是： 13
########################################
f.seek(偏移量，whence=相对位置)
	偏移量：
		大于0的数代表向后偏移（文件尾方向）
		小于0的数代表向文件头方向偏移
	相对位置：
		0 代表文件头位置开始偏移
		1 代表从当前位置开始偏移
		2 代表从文件尾开始偏移
###############################################
f=open('demo/myfile.txt','rb')
b=f.read(3)
print('你读取的是：',b)
print('当前的读写位置是：',f.tell())
# print('当前的读写位置是：',f.tell())
# f.read(10)
# print('当前的读写位置是：',f.tell())
# f.seek(2,1)
f.seek(-15,2)
# f.seek(5,0)
print('当前的读写位置是:',f.tell())
b=f.read(5)
print('读取的内容是：',b)
f.close()
#############################
你读取的是： b'ABC'
当前的读写位置是： 3
当前的读写位置是: 5
读取的内容是： b'abcde'
##################################

f=open('demo/myflush.txt','wb')
f.write('aaaaaaaaaaaaa')
while True:
    pass
f.close()
###############这样写只会在缓冲区（一直写），不会在硬盘中，文件中不会有内容
import time
f=open('demo/myflush.txt','w')
f.write('aaaaaaaaaaaaa')
f.flush()   #强制清空缓冲区
while True:
    time.sleep(0.1)
f.close()
#################################################
f.flush()      清空缓冲区，在print()函数中，'\n'也可以用清空缓冲区作用，更常用的是flush=True
############################################################
标准输入输出文件：
sys.stdin  标准输入文件（默认为键盘）
sys.stdout 标准输出文件（默认为屏幕终端）
sys.stderr 标准错误输入文件（默认为屏幕终端）

标准文件不需要打开和关闭，可以直接使用
import sys
s=sys.stdin.readline()
print(s)
print('len(s)=',len(s))
# sys.stdin.close()  #关闭后很多函数不能用
s=input('请输入：')
print(s)

sys.stdout.write('你好！\n')
print('hello')
##################################
rtfd（#自己输入的）
rtfd

len(s)= 5
请输入：dfgr
dfgr
你好！
hello
##############################################

汉字编码问题
汉字编码：
	国标系列：
	GB18030(二字节或四字节编码，共27533个汉字)（和下面两个包含关系）
	GBK（二字节编码，共21003个汉字）
	GB2312（二字节编码，共6763个汉字）
	注：windows常用
国际标准：
	Unicode   <------->  UTF-8

	(linux/Mac OS X/Android 常用)

python的编码字符串（字符串都是unicode的）
	'gb18030'
	'gbk'
	'gb2312'
	'utf-8'
	'ascii'

>>> s='中文'
>>> b=s.encode('gbk')
>>> b
b'\xd6\xd0\xce\xc4'

编码注释：
	在源文件的第一行或第二行写入如下内容为编码注释
	# _*_ coding:gbk _*_
	或
	# -*- coding:gbk -*-
	作用：	
		告诉python解释执行器，当前文件的编码是什么
	（将不同操作系统的文件编码能执行）
	（python2上默认的编码方式不是utf-8）
