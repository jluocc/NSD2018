1.
>>> class Car:
...     '''这是汽车类的文档字符串'''
...     total_count=1
...     def run(self,speed):
...         '这是run方法的文档字符串'
...
>>> help(Car)
Help on class Car in module __main__:

class Car(builtins.object)
 |  这是汽车类的文档字符串
 |
 |  Methods defined here:
 |
 |  run(self, speed)
 |      这是run方法的文档字符串
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |
 |  total_count = 1
>>> Car.__doc__
'这是汽车类的文档字符串'
>>> Car.run.__doc__
'这是run方法的文档字符串'
>>> dir(Car)
['__class__', '__delattr__', '__dict__', '__dir__', 
'__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', 
'__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', 
'__lt__', '__module__', '__ne__', '__new__', '__reduce__', 
'__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', 
'__str__', '__subclasshook__', '__weakref__', 'run', 'total_count']

'run', 'total_count'两个变量

2.
class Human():
    __slots__=['name','age']
    def __init__(self,n,a):
        self.name,self.age=n,a
    def show_info(self):
        print(self.name,self.age)
s1=Human('Tarena',15)
s1.show_info()
s1.Age=16
s1.show_info()

Tarena 15
Traceback (most recent call last):
  File "/home/tarena/test/demo/demo.py", line 186, in <module>
    s1.Age=16
AttributeError: 'Human' object has no attribute 'Age'
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
>>> class Human():
...     __slots__=['name','age']
...     def __init__(self,n,a):
...         self.name,self.age=n,a
...     def show_info(self):
...         print(self.name,self.age)
...
>>> man1=Human('校长',35)
>>> man1.__dict__
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Human' object has no attribute '__dict__'
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――---
>>> class Human():
...     def __init__(self,n,a):
...         self.name,self.age=n,a
...     def show_info(self):
...         print(self.name,self.age)
...
>>> man=Human('我好付款',56)
>>> man.__dict__
{'name': '我好付款', 'age': 56}
----------------------------------------------------------------------

3.类方法
class A:
    v=0
    @classmethod
    def get_v(cls):
        return cls.v
    @classmethod
    def set_v(cls,value):
        cls.v=value
# print(A.v)   #直接访问类变量（不推荐　类.变量）
value=A.get_v()
print('value=',value)

A.set_v(999)
print(A.get_v())

value= 0
999
----------------------------------------------------------
class A:
    v=0
    @classmethod
    def get_v(cls):
        return cls.v
    @classmethod
    def set_v(cls,value):
        cls.v=value
a=A()
print(a.get_v())
print(a.set_v(100))
print(a.get_v())
print(A.v)

0
None（注意这种情况）
100
100
-----------------------------------------------------------------
不管是用类还是对象，cls传进来的都是类，a.get_v()这种情况也只是传进去a
对象里的__class__类
----------------------------------------------------------------

4.静态方法
class A:    
    @staticmethod
    def myadd(a,b):
        '''这是静态方法'''
        return a+b
#用类调用
print(A.myadd(100,200))
a=A()
#用实例
print(a.myadd(300,400))

300
700
---------------------------------------------------------------------

5.继承和派生
class Human:
    def say(self,what):
        print('说：',what)
    def walk(self,distance):
        print('走了',distance,'公里')
class Student(Human):
    def study(self,subject):
        print('学：',subject)
class Teacher(Human):
    def teach(self,subject):
        print('教:',subject)
h1=Human()
h1.say('天真蓝')
h1.walk(5)
h2=Student()
h2.say('你真好')
h2.study('python')
h3=Teacher()
h2.walk(6)
h3.teach('数学')

说： 天真蓝
走了 5 公里
说： 你真好
学： python
走了 6 公里
教: 数学
----------------------------------------------------------------

6.super函数
class A:
    def work(self):
        print('A.work被调用')
class B(A):

    def work(self):
        print('B.work被调用')
    def mywork(self):
        self.work()
        super(B,self).work()
        super().work() #########和上一个没区别，参数等同，只是没写，但是只能在方法内使用
b=B()
# b.work()
# # A.work(b)   (不推荐)
# super(B,b).work()
b.mywork()

B.work被调用
A.work被调用
A.work被调用
----------------------------------------------------------------
7.显示调用__init__
class Human:
    def __init__(self,n,a):
        self.name=n
        self.age=a
        print('Human.__init__被调用')
    def show_info(self):
        print('姓名:',self.name)
        print('年龄:',self.age)
class Student(Human):
    def __init__(self,n,a,s=0):
        print('Student.__init__被调用')
s=Student('小名',20)
s.show_info()

Student.__init__被调用
Traceback (most recent call last):
  File "/home/tarena/test/demo/demo.py", line 13, in <module>
    s.show_info()
  File "/home/tarena/test/demo/demo.py", line 7, in show_info
    print('姓名:',self.name)
AttributeError: 'Student' object hasno attribute 'name'
-------------------------------------------------------------
class Human:
    def __init__(self,n,a):
        self.name=n
        self.age=a
        print('Human.__init__被调用')
    def show_info(self):
        print('姓名:',self.name)
        print('年龄:',self.age)
class Student(Human):
    def __init__(self,n,a,s=0):
        super(Student,self).__init__(n,a)
        self.score=s
        print('Student.__init__被调用')
    def show_info(self):
        super(Student,self).show_info()   ###################参数为self的都不用写
        print('分数:',self.score)
        print('Student.__init__被调用')
s=Student('小名',20)
s.show_info()

Human.__init__被调用
Student.__init__被调用
姓名: 小名
年龄: 20
分数: 0
Student.__init__被调用
---------------------------------------------------------------