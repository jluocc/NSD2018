回顾：issubclass(cls,类或元组) 判断类的父子关系
面向对象的三个特征：
封装（以类为单位）
继承
多态

异常（高级）：
with语句
	语法:with 表达式 [as 变量1],表达式2 [as 变量2]...:
		语句块
	（如果句子太长，可将表达式赋值给一个变量）
	作用：
		使用对资源进行访问的场合，确保使用过程中，不算是否发生异常，都会
		执行必须的'清理'操作，并释放资源
		如：文件使用后自动关闭，现在中锁的自动获取和释放等
	说明：
		with语句并不会改变异常的状态（同try-finally类似）

环境管理器：
	类内有__enter__和__exit__实例方法的类创建的实例被称为环境管理器
	能够with进行管理的对象必须是环境管理器
	__enter__方法将在进入with语句时被调用，且返回由as变量管理的对象
	__exit__方法将在离开with语句时被调用，且可以用形参判断离开with语句时的状态

class A:
    '''次类的对象将可用于with语句中'''
    def __enter__(self):
        print('已经进入到with语句的内部')
        return self       ###############必须返回一个能绑定的对象
    def __exit__(self,e_t,e_v,e_tb):
        '''e_t用来绑定异常类型
            e_v用来绑定异常对象
            e_tb用来绑定追踪对象
            在没有异常时，三个对象都绑定None'''
        if e_t is None:
            print('已正常没有异常离开with语句')
        else:
            print('是在出异常时走异常流程离开的with语句')

with A() as a:
    print('这是with语句内部的print')
    int(input('请输入一个整数'))
 ##########################################################正常时
 已经进入到with语句的内部
这是with语句内部的print
请输入一个整数5
已正常没有异常离开with语句
#######################################################异常时
已经进入到with语句的内部
这是with语句内部的print
请输入一个整数ｇｊｇｊｈ
是在出异常时走异常流程离开的with语句
Traceback (most recent call last):
  File "/home/tarena/test/demo/demo1.py", line 18, in <module>
    int(input('请输入一个整数'))
ValueError: invalid literal for int() with base 10: 'ｇｊｇｊｈ'

运算符重载 overload（+ - * /）
	什么是运算符重载
		让自定义的类生成的对象（实例）能够使用运算符进行操作
	作用：
		让程序简洁易读
		对自定义的对象将运算符赋予新的规则

	说明：
		运算符重载方法的参数的固定的含义，不建议改变运算符的原的含义

算术运算符重载方法
方法名                         运算符和表达式          说明
__add__(self,rhs)                 self+rhs              加法
__sub__(self,rhs)                 self-rhs              减法
__mul__(self,rhs)                 self*rhs              乘法
__truediv__(self,rhs)             self/rhs              除法
__floordiv__(self,rhs)            self//rhs             地板除
__mod__(self,rhs)                 self%rhs              求余
__pow__(self,rhs)                 self**rhs              幂运算
注：rhs(right hand side)右手边

反向算术运算符的重载：
	当运算符的左侧为内建类型，右侧为自定义类型进行算术运算时，会出现TypeError错误
	因无法修改内建类型的代码实现运算符重载，此时需要使用反向算术运算符的重载来完成重载
	方法名                         运算符和表达式          说明
__radd__(self,lhs)                 lhs+self              加法
__rsub__(self,lhs)                 lhs-self              减法
__rmul__(self,lhs)                 lhs*self              乘法
__rtruediv__(self,lhs)             lhs/self              除法
__rfloordiv__(self,lhs)            lhs//self             地板除
__rmod__(self,lhs)                 lhs%self             求余
__rpow__(self,lhs)                 lhs*self              幂运算

复合赋值算术运算符的重载：
	以复合赋值算术运算符x+=y为例，此运算符会优先调用x.__iadd__(y)方法，如果没有__iadd__
	方法时会将复合赋值运算符拆解为x=x+y，然后调用x=x.__add__(y)方法，如果再不存在__add__
	方法，则会触发TypeError异常
		其他复合赋值算术运算符有西相同的规则
	方法名                         运算符和表达式          说明
__iadd__(self,rhs)                 self+=rhs              加法
__isub__(self,rhs)                 self-=rhs              减法
__imul__(self,rhs)                 self*=rhs              乘法
__itruediv__(self,rhs)             self/=rhs              除法
__ifloordiv__(self,rhs)            self//=rhs             地板除
__imod__(self,rhs)                 self%=rhs              求余
__ipow__(self,rhs)                 self**=rhs              幂运算

（可变的对象的函数直接调用就可以改变这个对象，不需要把操作后的值赋给新对象，不可变的需要）

比较运算符的重载
方法名                         运算符和表达式        说明
__lt__(self,rhs)                self<rhs             小于
__le__(self,rhs)               self<=rhs             小于等于
__gt__(self,rhs)               self>rhs              大于
__ge__(self,rhs)               self>=rhs             大于等于
__eq__(self,rhs)               self==rhs             等于
__ne__(self,rhs)               self!=rhs             不等于

位运算符重载
方法名                        运算符和表达式                说明
__and__(self,rhs)              self &  rhs                 位与
__or__(self,rhs)               self !  rhs                 位或
__xor__(self,rhs)              self ^  rhs                 位异或
__lshift__(self,rhs)           self <<  rhs                左移
__rshift__(self,rhs)           self >>  rhs                右移

反运算
方法名                        运算符和表达式                说明
__rand__(self,rhs)              rhs &  self                 位与
__ror__(self,rhs)               rhs !  self                 位或
__rxor__(self,rhs)              rhs ^  self                 位异或
__rlshift__(self,rhs)           rhs <<  self                左移
__rrshift__(self,rhs)           rhs >>  self                右移

复合赋值位运算符重载
方法名                        运算符和表达式                说明
__iand__(self,rhs)              self &=  rhs                 位与
__ior__(self,rhs)               self !=  rhs                 位或
__ixor__(self,rhs)              self ^=  rhs                 位异或
__ilshift__(self,rhs)           self <<=  rhs                左移
__irshift__(self,rhs)           self >> = rhs                右移


################help(int) 可以查看所有的运算符

一元运算符的重载
方法名                    运算符和表达式              说明
__neg__(self)                 - self                   负号
__pos__(self)                 + self                   正号
__invert__(self)              ~ self                   取反

一元运算符的重载语法
class 类名：
	def  __xxx__(self):
		...

in /not in 运算符重载
方法格式：
def __contains__(self,e):
	...

#  e in self

索引和切片运算符的重载
重载方法：
	方法名                     运算符和表达式                  说明
__getiterm__(self,i)             x=self[i]                     取值
__setitem__(self,i,v)            self[i]=v                     赋值
__delitem__(self,i)              delf self[i]                  删除

作用：
让自定义的类型的对象能够支持索引和切片

slice构造函数：
	作用：用于创建一个slice切片对象，此对象存储一个切片的起始值，终止值，步长信息

	格式：
		slice(start=None,stop=None,step=None)
	slice的属性
	s.start 切片的起始值，默认为None
	s.stop 切片的终止值，默认为None
	s.step 切片的步长，默认为None

特性属性：@property
	实现其他语言所拥有的getter和setter功能

	作用：
		用来模拟(虚拟)一个属性
		通过（@property）装饰器可以对模拟的属性赋值和取值加以控制