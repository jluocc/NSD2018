回顾：
'格式化字符串'   %   参数
'格式化字符串'   %   （参数1，参数2）
for语句
	作用：用来遍历可迭代对象的数据元素

可迭代对象：
	字符串： str
	列表：list
	元组 tuple
	字典 dict
	集合 set
语法：
	for 变量列表 in 可迭代对象：
		语句块1
	else:
		语句块2

i=6
for x in range(1,i):
    print('x=',x,'i=',i)
    i-=1

^[[Atarena@tedu:~/lubo/test$ python3 demo03.py
x= 1 i= 6
x= 2 i= 5
x= 3 i= 4
x= 4 i= 3
x= 5 i= 2

for语句变量列表里的变量可能不被创建
for i in range(4,0):

for语句中用break语句终端执行时，else子句不会被执行

列表的构造（创建）函数list
list()      生产一个空的列表 等同于[]
list(iterable)	用可迭代对象创建一个列表

列表的运算：
	算术运算：
	+  +=   *  *=
+     用于拼接列表
+=    用原列表与右侧拼接，再用变量绑定列表（加后的得到的是原列表增加了，但是不会形成新列表
可用id查看，也证明了列表可以被改变的）
      注，在可变对象中 （可变对象+=可变对象2  ！= 可变对象=可变对象+可变对象2）
>>> s='123'
>>> id(s)
2277035664360
>>> s+='456'
>>> id(s)
2277035664416（这种情况本来是字符串相加形成新的字符串）

>>> a='123'
>>> a=['123']
>>> id(a)
2277035645320
>>> a+=['456']
>>> id(a)
2277035645320
>>> a=a+['46']
>>> id(a)
2277035656328

*   用于生成重复的列表
*=  用原列表生成重复列表。。。。。。


列表的比较运算：
运算符：
< <= > >= == !=
说明：
列表的比较规则与字符串的比较规则相同
列表要求每两个元组能一次进行比较，否则会出现类型错误
（同位置同类型）
注：'two' < '二'   true  （这个能比  t 和 二 比）
列表是可迭代对象

列表的in / not in 运算符
	判断一个值是否存在于列表中，如果存在返回True,否则
	返回False
	说明；同字符串的in/not in类似，但只能判断单个元素是否存在于列表中


列表的索引操作。。（必须是整数，3.0也不行）

列表的切片：
	语法；
		列表[(开始索引):(结束索引):[(步长)]]

切片的赋值操作
作用；可以改变原列表的排序，可以插入和修改数据
可以用切片改变列表对应的元素的值
语法:列表[切片]=可迭代对象
切换前后的对象个数可以不对等
(弄清楚是缝还是一个对象，缝就是加进去，对象就是替换)
>>> l=[3,2]
>>> l[0:0]=[1,2,4]
>>> l
[1, 2, 4, 3, 2]

>>> l=[3,2]
>>> l[2:2]=[7,8,9]
>>> l
[3, 2, 7, 8, 9]
删除就是等于[]

切片注意事项：
对于步长不等于1的切片赋值，赋值运算符的右侧的可片【
迭代对象提供的元素个数一定要等于切片切出的段数
